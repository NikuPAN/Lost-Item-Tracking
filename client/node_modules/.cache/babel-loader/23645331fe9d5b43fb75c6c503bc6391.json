{"ast":null,"code":"import { useLabel } from \"@react-aria/label\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\n\nexport function useTextField(props, ref) {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange: _onChange = () => {}\n  } = props;\n  let {\n    focusableProps\n  } = useFocusable(props, ref);\n  let {\n    labelProps,\n    fieldProps\n  } = useLabel(props);\n  let domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n  return {\n    labelProps,\n    inputProps: mergeProps(domProps, inputElementType === 'input' && inputOnlyProps, _babelRuntimeHelpersEsmExtends({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-activedescendant': props['aria-activedescendant'],\n      'aria-autocomplete': props['aria-autocomplete'],\n      'aria-haspopup': props['aria-haspopup'],\n      value: props.value,\n      defaultValue: props.value ? undefined : props.defaultValue,\n      onChange: e => _onChange(e.target.value),\n      autoComplete: props.autoComplete,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      // Clipboard events\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      // Composition events\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      // Selection events\n      onSelect: props.onSelect,\n      // Input events\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps, fieldProps))\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/textfield/src/useTextField.ts"],"names":["inputElementType","isDisabled","isRequired","isReadOnly","type","onChange","focusableProps","useFocusable","fieldProps","useLabel","domProps","filterDOMProps","labelable","inputOnlyProps","pattern","props","inputProps","mergeProps","disabled","readOnly","validationState","value","defaultValue","e","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput"],"mappings":";;;;AAoCA;;;;;;OAKO,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAGU;AACf,MAAI;AACFA,IAAAA,gBAAgB,GADd,OAAA;AAEFC,IAAAA,UAAU,GAFR,KAAA;AAGFC,IAAAA,UAAU,GAHR,KAAA;AAIFC,IAAAA,UAAU,GAJR,KAAA;AAAA,IAAA,eAAA;AAMFC,IAAAA,IAAI,GANF,MAAA;AAOFC,IAAAA,QAAQ,EAARA,SAAQ,GAAG,MAAM,CAAE;AAPjB,MAAJ,KAAA;AASA,MAAI;AAACC,IAAAA;AAAD,MAAmBC,YAAY,CAAA,KAAA,EAAnC,GAAmC,CAAnC;AACA,MAAI;AAAA,IAAA,UAAA;AAAaC,IAAAA;AAAb,MAA2BC,QAAQ,CAAvC,KAAuC,CAAvC;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAQ;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AAEA,QAAMC,cAAc,GAAG;AAAA,IAAA,IAAA;AAErBC,IAAAA,OAAO,EAAEC,KAAK,CAACD;AAFM,GAAvB;AAKA,SAAO;AAAA,IAAA,UAAA;AAELE,IAAAA,UAAU,EAAEC,UAAU,CAAA,QAAA,EAEpBjB,gBAAgB,KAAhBA,OAAAA,IAFoB,cAAA,EAAA,8BAAA,CAAA;AAIlBkB,MAAAA,QAAQ,EAJU,UAAA;AAKlBC,MAAAA,QAAQ,EALU,UAAA;AAMlB,uBAAiBjB,UAAU,IANT,SAAA;AAOlB,sBAAgBkB,eAAe,KAAfA,SAAAA,IAPE,SAAA;AAQlB,2BAAqBL,KAAK,CARR,mBAQQ,CARR;AASlB,+BAAyBA,KAAK,CATZ,uBASY,CATZ;AAUlB,2BAAqBA,KAAK,CAVR,mBAUQ,CAVR;AAWlB,uBAAiBA,KAAK,CAXJ,eAWI,CAXJ;AAYlBM,MAAAA,KAAK,EAAEN,KAAK,CAZM,KAAA;AAalBO,MAAAA,YAAY,EAAEP,KAAK,CAALA,KAAAA,GAAAA,SAAAA,GAA0BA,KAAK,CAb3B,YAAA;AAclBV,MAAAA,QAAQ,EAAGkB,CAAD,IAAsClB,SAAQ,CAACkB,CAAC,CAADA,MAAAA,CAdvC,KAcsC,CAdtC;AAelBC,MAAAA,YAAY,EAAET,KAAK,CAfD,YAAA;AAgBlBU,MAAAA,SAAS,EAAEV,KAAK,CAhBE,SAAA;AAiBlBW,MAAAA,SAAS,EAAEX,KAAK,CAjBE,SAAA;AAkBlBY,MAAAA,IAAI,EAAEZ,KAAK,CAlBO,IAAA;AAmBlBa,MAAAA,WAAW,EAAEb,KAAK,CAnBA,WAAA;AAoBlBc,MAAAA,SAAS,EAAEd,KAAK,CApBE,SAAA;AAsBlB;AACAe,MAAAA,MAAM,EAAEf,KAAK,CAvBK,MAAA;AAwBlBgB,MAAAA,KAAK,EAAEhB,KAAK,CAxBM,KAAA;AAyBlBiB,MAAAA,OAAO,EAAEjB,KAAK,CAzBI,OAAA;AA2BlB;AACAkB,MAAAA,gBAAgB,EAAElB,KAAK,CA5BL,gBAAA;AA6BlBmB,MAAAA,kBAAkB,EAAEnB,KAAK,CA7BP,kBAAA;AA8BlBoB,MAAAA,mBAAmB,EAAEpB,KAAK,CA9BR,mBAAA;AAgClB;AACAqB,MAAAA,QAAQ,EAAErB,KAAK,CAjCG,QAAA;AAmClB;AACAsB,MAAAA,aAAa,EAAEtB,KAAK,CApCF,aAAA;AAqClBuB,MAAAA,OAAO,EAAEvB,KAAK,CAACuB;AArCG,KAAA,EAAA,cAAA,EAAA,UAAA,CAAA;AAFjB,GAAP;AA6CD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, TextareaHTMLAttributes} from 'react';\nimport {ElementType} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\ninterface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\ninterface AriaTextFieldOptions extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: ElementType\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField(\n  props: AriaTextFieldOptions,\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement>\n): TextFieldAria {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}