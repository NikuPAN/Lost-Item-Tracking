{"ast":null,"code":"import { useControlledState } from \"@react-stately/utils\";\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\n\nexport function useCheckboxGroupState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n  const state = {\n    value: selectedValues,\n\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n\n        return values;\n      });\n    },\n\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n\n        return values;\n      });\n    },\n\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n\n        return values.concat(value);\n      });\n    }\n\n  };\n  return state;\n}","map":{"version":3,"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"names":["props","useControlledState","state","value","setValue","isDisabled","isReadOnly","isSelected","selectedValues","addValue","values","removeValue","existingValue","toggleValue"],"mappings":";AAyCA;;;;;OAIO,SAAA,qBAAA,CAAA,KAAA,EAAmF;AAAA,MAApDA,KAAoD,KAAA,KAAA,CAAA,EAAA;AAApDA,IAAAA,KAAoD,GAAxB,EAA5BA;AAAoD;;AACxF,MAAI,CAAA,cAAA,EAAA,QAAA,IAA6BC,kBAAkB,CAACD,KAAK,CAAN,KAAA,EAAcA,KAAK,CAALA,YAAAA,IAAd,EAAA,EAAwCA,KAAK,CAAhG,QAAmD,CAAnD;AAEA,QAAME,KAAyB,GAAG;AAChCC,IAAAA,KAAK,EAD2B,cAAA;;AAEhCC,IAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,UAAIJ,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;AACxC;AACD;;AAEDI,MAAAA,QAAQ,CAARA,KAAQ,CAARA;AAP8B,KAAA;;AAShCC,IAAAA,UAAU,EAAEL,KAAK,CAALA,UAAAA,IAToB,KAAA;AAUhCM,IAAAA,UAAU,EAAEN,KAAK,CAALA,UAAAA,IAVoB,KAAA;;AAWhCO,IAAAA,UAAU,CAAA,KAAA,EAAQ;AAChB,aAAOC,cAAc,CAAdA,QAAAA,CAAP,KAAOA,CAAP;AAZ8B,KAAA;;AAchCC,IAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,UAAIT,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;AACxC;AACD;;AACDI,MAAAA,QAAQ,CAACM,MAAM,IAAI;AACjB,YAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,KAAKA,CAAL,EAA6B;AAC3B,iBAAOA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AACD,eAAA,MAAA;AAJFN,OAAQ,CAARA;AAlB8B,KAAA;;AAyBhCO,IAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,UAAIX,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;AACxC;AACD;;AACDI,MAAAA,QAAQ,CAACM,MAAM,IAAI;AACjB,YAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,EAA4B;AAC1B,iBAAOA,MAAM,CAANA,MAAAA,CAAcE,aAAa,IAAIA,aAAa,KAAnD,KAAOF,CAAP;AACD;;AACD,eAAA,MAAA;AAJFN,OAAQ,CAARA;AA7B8B,KAAA;;AAoChCS,IAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,UAAIb,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;AACxC;AACD;;AACDI,MAAAA,QAAQ,CAACM,MAAM,IAAI;AACjB,YAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,EAA4B;AAC1B,iBAAOA,MAAM,CAANA,MAAAA,CAAcE,aAAa,IAAIA,aAAa,KAAnD,KAAOF,CAAP;AACD;;AACD,eAAOA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP;AAJFN,OAAQ,CAARA;AAMD;;AA9C+B,GAAlC;AAiDA,SAAA,KAAA;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}