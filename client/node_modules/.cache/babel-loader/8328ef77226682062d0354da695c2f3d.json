{"ast":null,"code":"import { useSelectableCollection, useSelectableItem } from \"@react-aria/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { useMemo, useState } from \"react\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $b728468b7dd6dbdaf6ef1812f01dd2a7$export$ActionGroupKeyboardDelegate {\n  constructor(collection, direction, orientation, disabledKeys) {\n    if (disabledKeys === void 0) {\n      disabledKeys = new Set();\n    }\n\n    this.collection = void 0;\n    this.flipDirection = void 0;\n    this.disabledKeys = void 0;\n    this.collection = collection;\n    this.flipDirection = direction === 'rtl' && orientation === 'horizontal';\n    this.disabledKeys = disabledKeys;\n  }\n\n  getKeyLeftOf(key) {\n    if (this.flipDirection) {\n      return this.getNextKey(key);\n    } else {\n      return this.getPreviousKey(key);\n    }\n  }\n\n  getKeyRightOf(key) {\n    if (this.flipDirection) {\n      return this.getPreviousKey(key);\n    } else {\n      return this.getNextKey(key);\n    }\n  }\n\n  getKeyAbove(key) {\n    return this.getPreviousKey(key);\n  }\n\n  getKeyBelow(key) {\n    return this.getNextKey(key);\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n\n    if (this.disabledKeys.has(key)) {\n      key = this.getNextKey(key);\n    }\n\n    return key;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n\n    if (this.disabledKeys.has(key)) {\n      key = this.getPreviousKey(key);\n    }\n\n    return key;\n  }\n\n  getNextKey(key) {\n    do {\n      key = this.collection.getKeyAfter(key);\n\n      if (key == null) {\n        key = this.collection.getFirstKey();\n      }\n    } while (this.disabledKeys.has(key));\n\n    return key;\n  }\n\n  getPreviousKey(key) {\n    do {\n      key = this.collection.getKeyBefore(key);\n\n      if (key == null) {\n        key = this.collection.getLastKey();\n      }\n    } while (this.disabledKeys.has(key));\n\n    return key;\n  }\n\n}\n\nconst $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES = {\n  'none': 'toolbar',\n  'single': 'radiogroup',\n  'multiple': 'toolbar'\n};\nexport function useActionGroup(props, state, ref) {\n  let {\n    isDisabled,\n    orientation = 'horizontal'\n  } = props;\n  let {\n    direction\n  } = useLocale(); // eslint-disable-next-line arrow-body-style\n\n  let keyboardDelegate = useMemo(() => {\n    return new $b728468b7dd6dbdaf6ef1812f01dd2a7$export$ActionGroupKeyboardDelegate(state.collection, direction, orientation, state.disabledKeys);\n  }, [state.collection, direction, orientation, state.disabledKeys]);\n  let {\n    collectionProps\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    keyboardDelegate,\n    disallowSelectAll: true\n  });\n  let [isFocusWithin, setFocusWithin] = useState(false);\n  let {\n    focusWithinProps\n  } = useFocusWithin({\n    onFocusWithinChange: setFocusWithin\n  });\n  let tabIndex = isFocusWithin ? -1 : 0;\n  let role = $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];\n  return {\n    actionGroupProps: _babelRuntimeHelpersEsmExtends({}, filterDOMProps(props, {\n      labelable: true\n    }), {\n      role,\n      'aria-orientation': role === 'toolbar' ? orientation : null,\n      'aria-disabled': isDisabled\n    }, mergeProps(focusWithinProps, collectionProps), {\n      tabIndex: isDisabled ? null : tabIndex\n    })\n  };\n}\nconst $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES = {\n  'none': null,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\nexport function useActionGroupItem(props, state, ref) {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES[selectionMode]\n  };\n\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n\n  let {\n    itemProps\n  } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: props.key,\n    ref\n  });\n  return {\n    buttonProps: mergeProps(itemProps, buttonProps)\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/actiongroup/src/ActionGroupKeyboardDelegate.ts","packages/@react-aria/actiongroup/src/useActionGroup.ts","packages/@react-aria/actiongroup/src/useActionGroupItem.ts"],"names":["collection","flipDirection","disabledKeys","constructor","direction","orientation","getKeyLeftOf","getKeyRightOf","getKeyAbove","getKeyBelow","getFirstKey","key","getLastKey","getNextKey","getPreviousKey","BUTTON_GROUP_ROLES","useLocale","keyboardDelegate","useMemo","state","collectionProps","useSelectableCollection","selectionManager","disallowSelectAll","useState","focusWithinProps","useFocusWithin","onFocusWithinChange","setFocusWithin","tabIndex","isFocusWithin","role","actionGroupProps","filterDOMProps","labelable","isDisabled","mergeProps","BUTTON_ROLES","selectionMode","buttonProps","isSelected","props","itemProps","useSelectableItem","ref"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Direction, KeyboardDelegate, Orientation} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ActionGroupKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<T>;\n  private flipDirection: boolean;\n  private disabledKeys: Set<Key>;\n\n  constructor(collection: Collection<T>, direction: Direction, orientation: Orientation, disabledKeys: Set<Key> = new Set()) {\n    this.collection = collection;\n    this.flipDirection = direction === 'rtl' && orientation === 'horizontal';\n    this.disabledKeys = disabledKeys;\n  }\n\n  getKeyLeftOf(key: Key) {\n    if (this.flipDirection) {\n      return this.getNextKey(key);\n    } else {\n      return this.getPreviousKey(key);\n    }\n  }\n\n  getKeyRightOf(key: Key) {\n    if (this.flipDirection) {\n      return this.getPreviousKey(key);\n    } else {\n      return this.getNextKey(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    return this.getPreviousKey(key);\n  }\n\n  getKeyBelow(key: Key) {\n    return this.getNextKey(key);\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    if (this.disabledKeys.has(key)) {\n      key = this.getNextKey(key);\n    }\n    return key;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    if (this.disabledKeys.has(key)) {\n      key = this.getPreviousKey(key);\n    }\n    return key;\n  }\n\n  getNextKey(key) {\n    do {\n      key = this.collection.getKeyAfter(key);\n      if (key == null) {\n        key = this.collection.getFirstKey();\n      }\n    } while (this.disabledKeys.has(key));\n    return key;\n  }\n\n  getPreviousKey(key) {\n    do {\n      key = this.collection.getKeyBefore(key);\n      if (key == null) {\n        key = this.collection.getLastKey();\n      }\n    } while (this.disabledKeys.has(key));\n    return key;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionGroupKeyboardDelegate} from './ActionGroupKeyboardDelegate';\nimport {AriaActionGroupProps} from '@react-types/actiongroup';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useMemo, useState} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {Orientation} from '@react-types/shared';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSelectableCollection} from '@react-aria/selection';\n\nconst BUTTON_GROUP_ROLES = {\n  'none': 'toolbar',\n  'single': 'radiogroup',\n  'multiple': 'toolbar'\n};\n\nexport interface ActionGroupAria {\n  actionGroupProps: HTMLAttributes<HTMLElement>\n}\n\nexport function useActionGroup<T>(props: AriaActionGroupProps<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ActionGroupAria {\n  let {\n    isDisabled,\n    orientation = 'horizontal' as Orientation\n  } = props;\n\n  let {direction} = useLocale();\n  // eslint-disable-next-line arrow-body-style\n  let keyboardDelegate = useMemo(() => {\n    return new ActionGroupKeyboardDelegate(state.collection, direction, orientation, state.disabledKeys);\n  }, [state.collection, direction, orientation, state.disabledKeys]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    keyboardDelegate,\n    disallowSelectAll: true\n  });\n\n  let [isFocusWithin, setFocusWithin] = useState(false);\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithinChange: setFocusWithin\n  });\n  let tabIndex = isFocusWithin ? -1 : 0;\n\n  let role = BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];\n  return {\n    actionGroupProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      'aria-orientation': role === 'toolbar' ? orientation : null,\n      'aria-disabled': isDisabled,\n      ...mergeProps(focusWithinProps, collectionProps),\n      tabIndex: isDisabled ? null : tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {mergeProps} from '@react-aria/utils';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface ActionGroupItemProps {\n  key: Key\n}\n\ninterface ActionGroupItemAria {\n  buttonProps: HTMLAttributes<HTMLElement>\n}\n\nconst BUTTON_ROLES = {\n  'none': null,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\n\nexport function useActionGroupItem<T>(props: ActionGroupItemProps, state: ListState<T>, ref: RefObject<HTMLElement>): ActionGroupItemAria {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: BUTTON_ROLES[selectionMode]\n  };\n\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: props.key,\n    ref\n  });\n\n  return {\n    buttonProps: mergeProps(itemProps, buttonProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}