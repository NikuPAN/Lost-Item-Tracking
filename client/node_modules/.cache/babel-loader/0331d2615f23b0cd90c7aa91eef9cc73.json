{"ast":null,"code":"import { useState } from \"react\";\nimport { useSingleSelectListState } from \"@react-stately/list\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides state management for a select component. Handles building a collection\n * of items from props, handles the open state for the popup menu, and manages\n * multiple selection state.\n */\n\nexport function useSelectState(props) {\n  let triggerState = useMenuTriggerState(props);\n  let listState = useSingleSelectListState(_babelRuntimeHelpersEsmExtends({}, props, {\n    onSelectionChange: key => {\n      if (props.onSelectionChange != null) {\n        props.onSelectionChange(key);\n      }\n\n      triggerState.close();\n    }\n  }));\n  let [isFocused, setFocused] = useState(false);\n  return _babelRuntimeHelpersEsmExtends({}, listState, triggerState, {\n    open() {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        triggerState.open();\n      }\n    },\n\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) {\n        triggerState.toggle(focusStrategy);\n      }\n    },\n\n    isFocused,\n    setFocused\n  });\n}","map":{"version":3,"sources":["packages/@react-stately/select/src/useSelectState.ts"],"names":["triggerState","useMenuTriggerState","listState","useSingleSelectListState","onSelectionChange","key","props","useState","open","toggle","setFocused"],"mappings":";;;;AAyBA;;;;;;OAKO,SAAA,cAAA,CAAA,KAAA,EAAkF;AACvF,MAAIA,YAAY,GAAGC,mBAAmB,CAAtC,KAAsC,CAAtC;AACA,MAAIC,SAAS,GAAGC,wBAAwB,CAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEtCC,IAAAA,iBAAiB,EAAGC,GAAD,IAAS;AAC1B,UAAIC,KAAK,CAALA,iBAAAA,IAAJ,IAAA,EAAqC;AACnCA,QAAAA,KAAK,CAALA,iBAAAA,CAAAA,GAAAA;AACD;;AAEDN,MAAAA,YAAY,CAAZA,KAAAA;AACD;AARqC,GAAA,CAAA,CAAxC;AAWA,MAAI,CAAA,SAAA,EAAA,UAAA,IAA0BO,QAAQ,CAAtC,KAAsC,CAAtC;AAEA,SAAA,8BAAA,CAAA,EAAA,EAAA,SAAA,EAAA,YAAA,EAAA;AAGEC,IAAAA,IAAI,GAAG;AACL;AACA,UAAIN,SAAS,CAATA,UAAAA,CAAAA,IAAAA,KAAJ,CAAA,EAAqC;AACnCF,QAAAA,YAAY,CAAZA,IAAAA;AACD;AAPL,KAAA;;AASES,IAAAA,MAAM,CAAA,aAAA,EAAgB;AACpB,UAAIP,SAAS,CAATA,UAAAA,CAAAA,IAAAA,KAAJ,CAAA,EAAqC;AACnCF,QAAAA,YAAY,CAAZA,MAAAA,CAAAA,aAAAA;AACD;AAZL,KAAA;;AAAA,IAAA,SAAA;AAeEU,IAAAA;AAfF,GAAA,CAAA;AAiBD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MenuTriggerState, useMenuTriggerState} from '@react-stately/menu';\nimport {SelectProps} from '@react-types/select';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {useState} from 'react';\n\nexport interface SelectState<T> extends SingleSelectListState<T>, MenuTriggerState {\n  /** Whether the select is currently focused. */\n  readonly isFocused: boolean,\n\n  /** Sets whether the select is focused. */\n  setFocused(isFocused: boolean): void\n}\n\n/**\n * Provides state management for a select component. Handles building a collection\n * of items from props, handles the open state for the popup menu, and manages\n * multiple selection state.\n */\nexport function useSelectState<T extends object>(props: SelectProps<T>): SelectState<T>  {\n  let triggerState = useMenuTriggerState(props);\n  let listState = useSingleSelectListState({\n    ...props,\n    onSelectionChange: (key) => {\n      if (props.onSelectionChange != null) {\n        props.onSelectionChange(key);\n      }\n\n      triggerState.close();\n    }\n  });\n\n  let [isFocused, setFocused] = useState(false);\n\n  return {\n    ...listState,\n    ...triggerState,\n    open() {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) {\n        triggerState.toggle(focusStrategy);\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\n"]},"metadata":{},"sourceType":"module"}