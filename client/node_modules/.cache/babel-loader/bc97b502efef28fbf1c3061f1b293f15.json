{"ast":null,"code":"import { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { Overlay } from \"@react-spectrum/overlays\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { useTooltip, useTooltipTrigger } from \"@react-aria/tooltip\";\nimport _spectrumIconsUiSuccessSmall from \"@spectrum-icons/ui/SuccessSmall\";\nimport _react, { useContext, useImperativeHandle, useRef } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport _spectrumIconsUiInfoSmall from \"@spectrum-icons/ui/InfoSmall\";\nimport { classNames, createDOMRef, useStyleProps } from \"@react-spectrum/utils\";\nimport _spectrumIconsUiAlertSmall from \"@spectrum-icons/ui/AlertSmall\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tooltip/vars.css\n\n\nvar $fce0adf931fbcb6e5bbc907c5444$exports = {};\n$fce0adf931fbcb6e5bbc907c5444$exports = {\n  \"spectrum-Tooltip\": \"_spectrum-Tooltip_23042\",\n  \"is-open\": \"_is-open_23042\",\n  \"spectrum-Tooltip--bottom\": \"_spectrum-Tooltip--bottom_23042\",\n  \"spectrum-Tooltip--top\": \"_spectrum-Tooltip--top_23042\",\n  \"spectrum-Tooltip--right\": \"_spectrum-Tooltip--right_23042\",\n  \"spectrum-Tooltip--left\": \"_spectrum-Tooltip--left_23042\",\n  \"spectrum-Tooltip-tip\": \"_spectrum-Tooltip-tip_23042\",\n  \"spectrum-Tooltip-typeIcon\": \"_spectrum-Tooltip-typeIcon_23042\",\n  \"spectrum-Tooltip-label\": \"_spectrum-Tooltip-label_23042\",\n  \"u-tooltip-showOnHover\": \"_u-tooltip-showOnHover_23042\",\n  \"is-hovered\": \"_is-hovered_23042\",\n  \"is-focused\": \"_is-focused_23042\",\n  \"spectrum-Tooltip--negative\": \"_spectrum-Tooltip--negative_23042\",\n  \"spectrum-Tooltip--error\": \"_spectrum-Tooltip--error_23042\",\n  \"spectrum-Tooltip--info\": \"_spectrum-Tooltip--info_23042\",\n  \"spectrum-Tooltip--help\": \"_spectrum-Tooltip--help_23042\",\n  \"spectrum-Tooltip--positive\": \"_spectrum-Tooltip--positive_23042\",\n  \"spectrum-Tooltip--success\": \"_spectrum-Tooltip--success_23042\"\n};\n\nconst $d79690ed71d0e589905a11b2fa970c7$export$TooltipContext = _react.createContext({});\n\nlet $bbf06d7c74e4575391edac06758d45$var$iconMap = {\n  info: _spectrumIconsUiInfoSmall,\n  positive: _spectrumIconsUiSuccessSmall,\n  negative: _spectrumIconsUiAlertSmall\n};\nvar $fce0adf931fbcb6e5bbc907c5444$$interop$default = $parcel$interopDefault($fce0adf931fbcb6e5bbc907c5444$exports);\n\nfunction $bbf06d7c74e4575391edac06758d45$var$Tooltip(props, ref) {\n  let _useContext = useContext($d79690ed71d0e589905a11b2fa970c7$export$TooltipContext),\n      {\n    ref: overlayRef,\n    arrowProps\n  } = _useContext,\n      tooltipProviderProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_useContext, [\"ref\", \"arrowProps\"]);\n\n  let defaultRef = useRef();\n  overlayRef = overlayRef || defaultRef;\n  props = mergeProps(props, tooltipProviderProps);\n\n  let {\n    variant = 'neutral',\n    placement = 'top',\n    isOpen,\n    showIcon\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"variant\", \"placement\", \"isOpen\", \"showIcon\"]);\n\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  let {\n    tooltipProps\n  } = useTooltip(props); // Sync ref with overlayRef from context.\n\n  useImperativeHandle(ref, () => createDOMRef(overlayRef));\n  let Icon = $bbf06d7c74e4575391edac06758d45$var$iconMap[variant];\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, styleProps, tooltipProps, {\n    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip', \"spectrum-Tooltip--\" + variant, \"spectrum-Tooltip--\" + placement, {\n      'is-open': isOpen\n    }, styleProps.className),\n    ref: overlayRef\n  }), showIcon && variant !== 'neutral' && /*#__PURE__*/_react.createElement(Icon, {\n    UNSAFE_className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-typeIcon'),\n    \"aria-hidden\": true\n  }), props.children && /*#__PURE__*/_react.createElement(\"span\", {\n    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-label')\n  }, props.children), /*#__PURE__*/_react.createElement(\"span\", _babelRuntimeHelpersEsmExtends({}, arrowProps, {\n    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-tip')\n  })));\n}\n/**\n * Display container for Tooltip content. Has a directional arrow dependent on its placement.\n */\n\n\nexport let Tooltip = _react.forwardRef($bbf06d7c74e4575391edac06758d45$var$Tooltip);\nconst $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_OFFSET = 7; // Closest visual match to Spectrum's mocks\n\nconst $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_CROSS_OFFSET = 0;\n\nfunction $af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger(props) {\n  let {\n    children,\n    crossOffset = $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_CROSS_OFFSET,\n    isDisabled,\n    offset = $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_OFFSET,\n    trigger: triggerAction\n  } = props;\n\n  let [trigger, tooltip] = _react.Children.toArray(children);\n\n  let state = useTooltipTriggerState(props);\n  let tooltipTriggerRef = useRef();\n  let overlayRef = useRef();\n  let {\n    triggerProps,\n    tooltipProps\n  } = useTooltipTrigger({\n    isDisabled,\n    trigger: triggerAction\n  }, state, tooltipTriggerRef);\n  let {\n    overlayProps,\n    arrowProps,\n    placement\n  } = useOverlayPosition({\n    placement: props.placement || 'top',\n    targetRef: tooltipTriggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    isOpen: state.isOpen\n  });\n  return /*#__PURE__*/_react.createElement(FocusableProvider, _babelRuntimeHelpersEsmExtends({}, triggerProps, {\n    ref: tooltipTriggerRef\n  }), trigger, /*#__PURE__*/_react.createElement($d79690ed71d0e589905a11b2fa970c7$export$TooltipContext.Provider, {\n    value: _babelRuntimeHelpersEsmExtends({\n      placement,\n      ref: overlayRef,\n      UNSAFE_style: overlayProps.style,\n      arrowProps\n    }, tooltipProps)\n  }, /*#__PURE__*/_react.createElement(Overlay, {\n    isOpen: state.isOpen\n  }, tooltip)));\n} // Support TooltipTrigger inside components using CollectionBuilder.\n\n\n$af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger.getCollectionNode = function* (props) {\n  // Replaced the use of React.Childern.toArray because it mutates the key prop.\n  let childArray = [];\n\n  _react.Children.forEach(props.children, child => {\n    if (_react.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n\n  let [trigger, tooltip] = childArray;\n  yield {\n    element: trigger,\n    wrapper: element => /*#__PURE__*/_react.createElement($af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger, _babelRuntimeHelpersEsmExtends({\n      key: element.key\n    }, props), element, tooltip)\n  };\n};\n/**\n * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing\n * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip\n * relative to the trigger.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nexport let TooltipTrigger = $af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger;","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/tooltip/vars.css","packages/@react-spectrum/tooltip/src/context.ts","packages/@react-spectrum/tooltip/src/Tooltip.tsx","packages/@react-spectrum/tooltip/src/TooltipTrigger.tsx"],"names":["a","TooltipContext","React","iconMap","info","positive","negative","AlertSmall","ref","arrowProps","tooltipProviderProps","useContext","defaultRef","useRef","overlayRef","props","mergeProps","variant","placement","showIcon","otherProps","styleProps","useStyleProps","tooltipProps","useTooltip","useImperativeHandle","createDOMRef","Icon","classNames","isOpen","_Tooltip","DEFAULT_OFFSET","DEFAULT_CROSS_OFFSET","crossOffset","offset","trigger","triggerAction","state","useTooltipTriggerState","tooltipTriggerRef","useTooltipTrigger","useOverlayPosition","targetRef","UNSAFE_style","overlayProps","TooltipTrigger","childArray","child","element","wrapper","key","_TooltipTrigger"],"mappings":"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","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PlacementAxis} from '@react-types/overlays';\nimport React, {HTMLAttributes, RefObject} from 'react';\nimport {StyleProps} from '@react-types/shared';\n\ninterface TooltipContextProps extends StyleProps {\n  ref?: RefObject<HTMLDivElement>,\n  placement?: PlacementAxis,\n  arrowProps?: HTMLAttributes<HTMLElement>\n}\n\nexport const TooltipContext = React.createContext<TooltipContextProps>({});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertSmall from '@spectrum-icons/ui/AlertSmall';\nimport {classNames, createDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport InfoSmall from '@spectrum-icons/ui/InfoSmall';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {useContext, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTooltipProps} from '@react-types/tooltip';\nimport styles from '@adobe/spectrum-css-temp/components/tooltip/vars.css';\nimport SuccessSmall from '@spectrum-icons/ui/SuccessSmall';\nimport {TooltipContext} from './context';\nimport {useTooltip} from '@react-aria/tooltip';\n\nlet iconMap = {\n  info: InfoSmall,\n  positive: SuccessSmall,\n  negative: AlertSmall\n};\n\nfunction Tooltip(props: SpectrumTooltipProps, ref: DOMRef) {\n  let {ref: overlayRef, arrowProps, ...tooltipProviderProps} = useContext(TooltipContext);\n  let defaultRef = useRef();\n  overlayRef = overlayRef || defaultRef;\n  props = mergeProps(props, tooltipProviderProps);\n  let {\n    variant = 'neutral',\n    placement = 'top',\n    isOpen,\n    showIcon,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let {tooltipProps} = useTooltip(props);\n\n  // Sync ref with overlayRef from context.\n  useImperativeHandle(ref, () => createDOMRef(overlayRef));\n\n  let Icon = iconMap[variant];\n\n  return (\n    <div\n      {...styleProps}\n      {...tooltipProps}\n      className={classNames(\n        styles,\n        'spectrum-Tooltip',\n        `spectrum-Tooltip--${variant}`,\n        `spectrum-Tooltip--${placement}`,\n        {\n          'is-open': isOpen\n        },\n        styleProps.className\n      )}\n      ref={overlayRef}>\n      {showIcon && variant !== 'neutral' && <Icon UNSAFE_className={classNames(styles, 'spectrum-Tooltip-typeIcon')} aria-hidden />}\n      {props.children && (\n        <span className={classNames(styles, 'spectrum-Tooltip-label')}>\n          {props.children}\n        </span>\n      )}\n      <span {...arrowProps} className={classNames(styles, 'spectrum-Tooltip-tip')} />\n    </div>\n  );\n}\n\n/**\n * Display container for Tooltip content. Has a directional arrow dependent on its placement.\n */\nlet _Tooltip = React.forwardRef(Tooltip);\nexport {_Tooltip as Tooltip};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableProvider} from '@react-aria/focus';\nimport {Overlay} from '@react-spectrum/overlays';\nimport React, {ReactElement, useRef} from 'react';\nimport {SpectrumTooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipContext} from './context';\nimport {useOverlayPosition} from '@react-aria/overlays';\nimport {useTooltipTrigger} from '@react-aria/tooltip';\nimport {useTooltipTriggerState} from '@react-stately/tooltip';\n\nconst DEFAULT_OFFSET = 7; // Closest visual match to Spectrum's mocks\nconst DEFAULT_CROSS_OFFSET = 0;\n\nfunction TooltipTrigger(props: SpectrumTooltipTriggerProps) {\n  let {\n    children,\n    crossOffset = DEFAULT_CROSS_OFFSET,\n    isDisabled,\n    offset = DEFAULT_OFFSET,\n    trigger: triggerAction\n  } = props;\n\n  let [trigger, tooltip] = React.Children.toArray(children);\n\n  let state = useTooltipTriggerState(props);\n\n  let tooltipTriggerRef = useRef<HTMLElement>();\n  let overlayRef = useRef<HTMLDivElement>();\n\n  let {triggerProps, tooltipProps} = useTooltipTrigger({\n    isDisabled,\n    trigger: triggerAction\n  }, state, tooltipTriggerRef);\n\n  let {overlayProps, arrowProps, placement} = useOverlayPosition({\n    placement: props.placement || 'top',\n    targetRef: tooltipTriggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    isOpen: state.isOpen\n  });\n\n  return (\n    <FocusableProvider\n      {...triggerProps}\n      ref={tooltipTriggerRef}>\n      {trigger}\n      <TooltipContext.Provider\n        value={{\n          placement,\n          ref: overlayRef,\n          UNSAFE_style: overlayProps.style,\n          arrowProps,\n          ...tooltipProps\n        }}>\n        <Overlay isOpen={state.isOpen}>\n          {tooltip}\n        </Overlay>\n      </TooltipContext.Provider>\n    </FocusableProvider>\n  );\n}\n\n// Support TooltipTrigger inside components using CollectionBuilder.\nTooltipTrigger.getCollectionNode = function* (props: SpectrumTooltipTriggerProps) {\n  // Replaced the use of React.Childern.toArray because it mutates the key prop.\n  let childArray: ReactElement[] = [];\n  React.Children.forEach(props.children, child => {\n    if (React.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n  let [trigger, tooltip] = childArray;\n  yield {\n    element: trigger,\n    wrapper: (element) => (\n      <TooltipTrigger key={element.key} {...props}>\n        {element}\n        {tooltip}\n      </TooltipTrigger>\n    )\n  };\n};\n\n/**\n * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing\n * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip\n * relative to the trigger.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TooltipTrigger = TooltipTrigger as (props: SpectrumTooltipTriggerProps) => JSX.Element;\nexport {_TooltipTrigger as TooltipTrigger};\n"]},"metadata":{},"sourceType":"module"}