{"ast":null,"code":"import { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useEffect, useMemo } from \"react\";\nconst $af9cde49ea815e766aeca6386e9$var$TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\n\nconst $af9cde49ea815e766aeca6386e9$var$TOOLTIP_COOLDOWN = 500;\nlet $af9cde49ea815e766aeca6386e9$var$tooltips = {};\nlet $af9cde49ea815e766aeca6386e9$var$tooltipId = 0;\nlet $af9cde49ea815e766aeca6386e9$var$globalWarmedUp = false;\nlet $af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout = null;\nlet $af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout = null;\n/**\n * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides\n * methods to toggle this state. Ensures only one tooltip is open at a time and controls\n * the delay for showing a tooltip.\n */\n\nexport function useTooltipTriggerState(props) {\n  let {\n    delay = $af9cde49ea815e766aeca6386e9$var$TOOLTIP_DELAY\n  } = props;\n  let {\n    isOpen,\n    open,\n    close\n  } = useOverlayTriggerState(props);\n  let id = useMemo(() => \"\" + ++$af9cde49ea815e766aeca6386e9$var$tooltipId, []);\n\n  let ensureTooltipEntry = () => {\n    $af9cde49ea815e766aeca6386e9$var$tooltips[id] = hideTooltip;\n  };\n\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in $af9cde49ea815e766aeca6386e9$var$tooltips) {\n      if (hideTooltipId !== id) {\n        $af9cde49ea815e766aeca6386e9$var$tooltips[hideTooltipId]();\n        delete $af9cde49ea815e766aeca6386e9$var$tooltips[hideTooltipId];\n      }\n    }\n  };\n\n  let showTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    $af9cde49ea815e766aeca6386e9$var$globalWarmedUp = true;\n    open();\n\n    if ($af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout) {\n      clearTimeout($af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout);\n      $af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout = null;\n    }\n\n    if ($af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout) {\n      clearTimeout($af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout);\n      $af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout = null;\n    }\n  };\n\n  let hideTooltip = () => {\n    close();\n\n    if ($af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout) {\n      clearTimeout($af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout);\n      $af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout = null;\n    }\n\n    if ($af9cde49ea815e766aeca6386e9$var$globalWarmedUp) {\n      if ($af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout) {\n        clearTimeout($af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout);\n      }\n\n      $af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout = setTimeout(() => {\n        delete $af9cde49ea815e766aeca6386e9$var$tooltips[id];\n        $af9cde49ea815e766aeca6386e9$var$globalCooldownTimeout = null;\n        $af9cde49ea815e766aeca6386e9$var$globalWarmedUp = false;\n      }, $af9cde49ea815e766aeca6386e9$var$TOOLTIP_COOLDOWN);\n    }\n  };\n\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n\n    if (!isOpen && !$af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout && !$af9cde49ea815e766aeca6386e9$var$globalWarmedUp) {\n      $af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout = setTimeout(() => {\n        $af9cde49ea815e766aeca6386e9$var$globalWarmUpTimeout = null;\n        $af9cde49ea815e766aeca6386e9$var$globalWarmedUp = true;\n        showTooltip();\n      }, delay);\n    } else if (!isOpen) {\n      showTooltip();\n    }\n  }; // eslint-disable-next-line arrow-body-style\n\n\n  useEffect(() => {\n    return () => {\n      let tooltip = $af9cde49ea815e766aeca6386e9$var$tooltips[id];\n\n      if (tooltip) {\n        delete $af9cde49ea815e766aeca6386e9$var$tooltips[id];\n      }\n    };\n  }, [id]);\n  return {\n    isOpen,\n    open: immediate => {\n      if (!immediate && delay > 0) {\n        warmupTooltip();\n      } else {\n        showTooltip();\n      }\n    },\n    close: () => {\n      hideTooltip();\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-stately/tooltip/src/useTooltipTriggerState.ts"],"names":["TOOLTIP_DELAY","TOOLTIP_COOLDOWN","tooltips","tooltipId","globalWarmedUp","globalWarmUpTimeout","globalCooldownTimeout","delay","close","useOverlayTriggerState","id","useMemo","ensureTooltipEntry","closeOpenTooltips","hideTooltipId","showTooltip","open","clearTimeout","hideTooltip","setTimeout","warmupTooltip","useEffect","tooltip","immediate"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {useEffect, useMemo} from 'react';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\n\nconst TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\nconst TOOLTIP_COOLDOWN = 500;\n\nexport interface TooltipTriggerState {\n  /** Whether the tooltip is currently showing. */\n  isOpen: boolean,\n  /**\n   * Shows the tooltip. By default, the tooltip becomes visible after a delay\n   * depending on a global warmup timer. The `immediate` option shows the\n   * tooltip immediately instead.\n   */\n  open(immediate?: boolean): void,\n  /** Hides the tooltip. */\n  close(): void\n}\n\nlet tooltips = {};\nlet tooltipId = 0;\nlet globalWarmedUp = false;\nlet globalWarmUpTimeout = null;\nlet globalCooldownTimeout = null;\n\n/**\n * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides\n * methods to toggle this state. Ensures only one tooltip is open at a time and controls\n * the delay for showing a tooltip.\n */\nexport function useTooltipTriggerState(props: TooltipTriggerProps): TooltipTriggerState {\n  let {delay = TOOLTIP_DELAY} = props;\n  let {isOpen, open, close} = useOverlayTriggerState(props);\n  let id = useMemo(() => `${++tooltipId}`, []);\n\n  let ensureTooltipEntry = () => {\n    tooltips[id] = hideTooltip;\n  };\n\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in tooltips) {\n      if (hideTooltipId !== id) {\n        tooltips[hideTooltipId]();\n        delete tooltips[hideTooltipId];\n      }\n    }\n  };\n\n  let showTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    globalWarmedUp = true;\n    open();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalCooldownTimeout) {\n      clearTimeout(globalCooldownTimeout);\n      globalCooldownTimeout = null;\n    }\n  };\n\n  let hideTooltip = () => {\n    close();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalWarmedUp) {\n      if (globalCooldownTimeout) {\n        clearTimeout(globalCooldownTimeout);\n      }\n      globalCooldownTimeout = setTimeout(() => {\n        delete tooltips[id];\n        globalCooldownTimeout = null;\n        globalWarmedUp = false;\n      }, TOOLTIP_COOLDOWN);\n    }\n  };\n\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    if (!isOpen && !globalWarmUpTimeout && !globalWarmedUp) {\n      globalWarmUpTimeout = setTimeout(() => {\n        globalWarmUpTimeout = null;\n        globalWarmedUp = true;\n        showTooltip();\n      }, delay);\n    } else if (!isOpen) {\n      showTooltip();\n    }\n  };\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      let tooltip = tooltips[id];\n      if (tooltip) {\n        delete tooltips[id];\n      }\n    };\n  }, [id]);\n\n  return {\n    isOpen,\n    open: (immediate) => {\n      if (!immediate && delay > 0) {\n        warmupTooltip();\n      } else {\n        showTooltip();\n      }\n    },\n    close: () => {\n      hideTooltip();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}