{"ast":null,"code":"import { useTextField } from \"@react-aria/textfield\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { useProviderProps } from \"@react-spectrum/provider\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useFormProps } from \"@react-spectrum/form\";\nimport { Label } from \"@react-spectrum/label\";\nimport { FocusRing } from \"@react-aria/focus\";\nimport { classNames, createFocusableRef, useStyleProps } from \"@react-spectrum/utils\";\nimport _spectrumIconsUiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport _spectrumIconsUiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport _react, { useCallback, useRef, cloneElement, forwardRef, useImperativeHandle } from \"react\";\nimport { chain, useLayoutEffect, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css\n\n\nvar $c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {};\n$c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {\n  \"spectrum-FieldLabel\": \"_spectrum-FieldLabel_36b9b\",\n  \"spectrum-FieldLabel--positionSide\": \"_spectrum-FieldLabel--positionSide_36b9b\",\n  \"spectrum-FieldLabel-requiredIcon\": \"_spectrum-FieldLabel-requiredIcon_36b9b\",\n  \"spectrum-FieldLabel--alignEnd\": \"_spectrum-FieldLabel--alignEnd_36b9b\",\n  \"spectrum-Field\": \"_spectrum-Field_36b9b\",\n  \"spectrum-Field--positionTop\": \"_spectrum-Field--positionTop_36b9b\",\n  \"spectrum-Field-field\": \"_spectrum-Field-field_36b9b\",\n  \"spectrum-Field--positionSide\": \"_spectrum-Field--positionSide_36b9b\",\n  \"spectrum-Form\": \"_spectrum-Form_36b9b\",\n  \"spectrum-Form--positionSide\": \"_spectrum-Form--positionSide_36b9b\",\n  \"spectrum-Form--positionTop\": \"_spectrum-Form--positionTop_36b9b\",\n  \"spectrum-Form-itemLabel\": \"_spectrum-Form-itemLabel_36b9b\",\n  \"is-disabled\": \"_is-disabled_36b9b\"\n}; // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css\n\nvar $aa1c742e7a2a16aa7981ca9e2f4a89$exports = {};\n$aa1c742e7a2a16aa7981ca9e2f4a89$exports = {\n  \"spectrum-Textfield\": \"_spectrum-Textfield_61339\",\n  \"spectrum-Textfield--quiet\": \"_spectrum-Textfield--quiet_61339\",\n  \"spectrum-Textfield--multiline\": \"_spectrum-Textfield--multiline_61339\",\n  \"spectrum-Textfield-input\": \"_spectrum-Textfield-input_61339\",\n  \"is-placeholder\": \"_is-placeholder_61339\",\n  \"is-hovered\": \"_is-hovered_61339\",\n  \"is-valid\": \"_is-valid_61339\",\n  \"is-invalid\": \"_is-invalid_61339\",\n  \"spectrum-Textfield-validationIcon\": \"_spectrum-Textfield-validationIcon_61339\",\n  \"spectrum-Textfield-icon\": \"_spectrum-Textfield-icon_61339\",\n  \"spectrum-Textfield-inputIcon\": \"_spectrum-Textfield-inputIcon_61339\",\n  \"is-focused\": \"_is-focused_61339\",\n  \"focus-ring\": \"_focus-ring_61339\",\n  \"is-disabled\": \"_is-disabled_61339\"\n};\nvar $aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default = $parcel$interopDefault($aa1c742e7a2a16aa7981ca9e2f4a89$exports);\nvar $c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default = $parcel$interopDefault($c9fb1f4220ea2c59cb2e10f0e9828c6e$exports);\n\nfunction $bf4e8b5f6a6cf158db09231425531fea$var$TextFieldBase(props, ref) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n\n  let {\n    label,\n    labelPosition = 'top',\n    labelAlign,\n    isRequired,\n    necessityIndicator,\n    validationState,\n    icon,\n    isQuiet = false,\n    isDisabled,\n    multiLine,\n    autoFocus,\n    inputClassName,\n    wrapperChildren,\n    labelProps,\n    inputProps,\n    inputRef\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"label\", \"labelPosition\", \"labelAlign\", \"isRequired\", \"necessityIndicator\", \"validationState\", \"icon\", \"isQuiet\", \"isDisabled\", \"multiLine\", \"autoFocus\", \"inputClassName\", \"wrapperChildren\", \"labelProps\", \"inputProps\", \"inputRef\"]);\n\n  let {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled\n  });\n  let domRef = useRef(null);\n  let defaultInputRef = useRef(null);\n  inputRef = inputRef || defaultInputRef; // Expose imperative interface for ref\n\n  useImperativeHandle(ref, () => _babelRuntimeHelpersEsmExtends({}, createFocusableRef(domRef, inputRef), {\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n\n    getInputElement() {\n      return inputRef.current;\n    }\n\n  }));\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  let ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid';\n\n  if (icon) {\n    let UNSAFE_className = classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');\n    icon = cloneElement(icon, {\n      UNSAFE_className,\n      size: 'S'\n    });\n  }\n\n  let validationIcon = isInvalid ? /*#__PURE__*/_react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, null);\n  let validation = cloneElement(validationIcon, {\n    UNSAFE_className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield-validationIcon', {\n      'is-invalid': isInvalid,\n      'is-valid': validationState === 'valid'\n    })\n  });\n\n  let textField = /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield', {\n      'is-invalid': isInvalid,\n      'is-valid': validationState === 'valid',\n      'spectrum-Textfield--quiet': isQuiet,\n      'spectrum-Textfield--multiline': multiLine\n    })\n  }, /*#__PURE__*/_react.createElement(FocusRing, {\n    focusRingClass: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'focus-ring'),\n    isTextInput: true,\n    autoFocus: autoFocus\n  }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, mergeProps(inputProps, hoverProps), {\n    ref: inputRef,\n    rows: multiLine ? 1 : undefined,\n    className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield-input', {\n      'spectrum-Textfield-inputIcon': icon,\n      'is-hovered': isHovered\n    }, inputClassName)\n  }))), icon, validationState ? validation : null, wrapperChildren);\n\n  if (label) {\n    let labelWrapperClass = classNames($c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default, 'spectrum-Field', {\n      'spectrum-Field--positionTop': labelPosition === 'top',\n      'spectrum-Field--positionSide': labelPosition === 'side'\n    }, styleProps.className);\n    textField = _react.cloneElement(textField, mergeProps(textField.props, {\n      className: classNames($c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default, 'spectrum-Field-field')\n    }));\n    return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, styleProps, {\n      ref: domRef,\n      className: labelWrapperClass\n    }), /*#__PURE__*/_react.createElement(Label, _babelRuntimeHelpersEsmExtends({}, labelProps, {\n      labelPosition: labelPosition,\n      labelAlign: labelAlign,\n      isRequired: isRequired,\n      necessityIndicator: necessityIndicator\n    }), label), textField);\n  }\n\n  return _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersEsmExtends({}, styleProps, {\n    ref: domRef\n  })));\n}\n\nexport const TextFieldBase = forwardRef($bf4e8b5f6a6cf158db09231425531fea$var$TextFieldBase);\n\nfunction $c4fbb705db8be6f428971c31601c3$var$TextArea(props, ref) {\n  props = useProviderProps(props);\n\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"isDisabled\", \"isQuiet\", \"isReadOnly\", \"isRequired\", \"onChange\"]); // not in stately because this is so we know when to re-measure, which is a spectrum design\n\n\n  let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, () => {});\n  let inputRef = useRef();\n  let onHeightChange = useCallback(() => {\n    if (isQuiet) {\n      let input = inputRef.current;\n      input.style.height = 'auto';\n      input.style.height = input.scrollHeight + \"px\";\n    }\n  }, [isQuiet, inputRef]);\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n  let {\n    labelProps,\n    inputProps\n  } = useTextField(_babelRuntimeHelpersEsmExtends({}, props, {\n    onChange: chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }), inputRef);\n  return /*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref: ref,\n    inputRef: inputRef,\n    labelProps: labelProps,\n    inputProps: inputProps,\n    multiLine: true,\n    isDisabled: isDisabled,\n    isQuiet: isQuiet,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  }));\n}\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\n\n\nexport let TextArea = _react.forwardRef($c4fbb705db8be6f428971c31601c3$var$TextArea);\n\nfunction $b9415e5cf6b021d77e82405d516096$var$TextField(props, ref) {\n  props = useProviderProps(props);\n  let inputRef = useRef();\n  let {\n    labelProps,\n    inputProps\n  } = useTextField(props, inputRef);\n  return /*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, props, {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    ref: ref,\n    inputRef: inputRef\n  }));\n}\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\n\n\nexport const TextField = forwardRef($b9415e5cf6b021d77e82405d516096$var$TextField);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css","node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css","packages/@react-spectrum/textfield/src/TextFieldBase.tsx","packages/@react-spectrum/textfield/src/TextArea.tsx","packages/@react-spectrum/textfield/src/TextField.tsx"],"names":["a","props","useProviderProps","useFormProps","labelPosition","isQuiet","inputRef","otherProps","isHovered","useHover","isDisabled","domRef","useRef","defaultInputRef","useImperativeHandle","createFocusableRef","select","getInputElement","styleProps","useStyleProps","ElementType","multiLine","isInvalid","validationState","UNSAFE_className","classNames","icon","cloneElement","size","validationIcon","validation","textField","autoFocus","mergeProps","labelWrapperClass","className","necessityIndicator","ref","_TextFieldBase","forwardRef","isReadOnly","isRequired","onChange","useControlledState","onHeightChange","useCallback","input","useLayoutEffect","inputProps","useTextField","chain","inputElementType","_TextArea","React","_TextField"],"mappings":"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","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {\n  classNames,\n  createFocusableRef,\n  useStyleProps\n} from '@react-spectrum/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {Label} from '@react-spectrum/label';\nimport {LabelPosition} from '@react-types/shared';\nimport labelStyles from '@adobe/spectrum-css-temp/components/fieldlabel/vars.css';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {cloneElement, forwardRef, InputHTMLAttributes, LabelHTMLAttributes, ReactElement, Ref, RefObject, TextareaHTMLAttributes, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport styles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\ninterface TextFieldBaseProps extends SpectrumTextFieldProps {\n  wrapperChildren?: ReactElement | ReactElement[],\n  inputClassName?: string,\n  multiLine?: boolean,\n  labelProps?: LabelHTMLAttributes<HTMLLabelElement>,\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  inputRef?: RefObject<HTMLInputElement | HTMLTextAreaElement>\n}\n\nfunction TextFieldBase(props: TextFieldBaseProps, ref: Ref<TextFieldRef>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let {\n    label,\n    labelPosition = 'top' as LabelPosition,\n    labelAlign,\n    isRequired,\n    necessityIndicator,\n    validationState,\n    icon,\n    isQuiet = false,\n    isDisabled,\n    multiLine,\n    autoFocus,\n    inputClassName,\n    wrapperChildren,\n    labelProps,\n    inputProps,\n    inputRef,\n    ...otherProps\n  } = props;\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let domRef = useRef<HTMLDivElement>(null);\n  let defaultInputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  inputRef = inputRef || defaultInputRef;\n\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  let {styleProps} = useStyleProps(otherProps);\n  let ElementType: React.ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid';\n\n  if (icon) {\n    let UNSAFE_className = classNames(\n      styles,\n      icon.props && icon.props.UNSAFE_className,\n      'spectrum-Textfield-icon'\n    );\n\n    icon = cloneElement(icon, {\n      UNSAFE_className,\n      size: 'S'\n    });\n  }\n\n  let validationIcon = isInvalid ? <AlertMedium /> : <CheckmarkMedium />;\n  let validation = cloneElement(validationIcon, {\n    UNSAFE_className: classNames(\n      styles,\n      'spectrum-Textfield-validationIcon',\n      {\n        'is-invalid': isInvalid,\n        'is-valid': validationState === 'valid'\n      }\n    )\n  });\n\n  let textField = (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Textfield',\n          {\n            'is-invalid': isInvalid,\n            'is-valid': validationState === 'valid',\n            'spectrum-Textfield--quiet': isQuiet,\n            'spectrum-Textfield--multiline': multiLine\n          }\n        )\n      }>\n      <FocusRing focusRingClass={classNames(styles, 'focus-ring')} isTextInput autoFocus={autoFocus}>\n        <ElementType\n          {...mergeProps(inputProps, hoverProps)}\n          ref={inputRef as any}\n          rows={multiLine ? 1 : undefined}\n          className={\n            classNames(\n              styles,\n              'spectrum-Textfield-input',\n              {\n                'spectrum-Textfield-inputIcon': icon,\n                'is-hovered': isHovered\n              },\n              inputClassName\n            )\n          } />\n      </FocusRing>\n      {icon}\n      {validationState ? validation : null}\n      {wrapperChildren}\n    </div>\n  );\n\n  if (label) {\n    let labelWrapperClass = classNames(\n      labelStyles,\n      'spectrum-Field',\n      {\n        'spectrum-Field--positionTop': labelPosition === 'top',\n        'spectrum-Field--positionSide': labelPosition === 'side'\n      },\n      styleProps.className\n    );\n\n    textField = React.cloneElement(textField, mergeProps(textField.props, {\n      className: classNames(labelStyles, 'spectrum-Field-field')\n    }));\n\n    return (\n      <div\n        {...styleProps}\n        ref={domRef}\n        className={labelWrapperClass}>\n        <Label\n          {...labelProps}\n          labelPosition={labelPosition}\n          labelAlign={labelAlign}\n          isRequired={isRequired}\n          necessityIndicator={necessityIndicator}>\n          {label}\n        </Label>\n        {textField}\n      </div>\n    );\n  }\n\n  return React.cloneElement(textField, mergeProps(textField.props, {\n    ...styleProps,\n    ref: domRef\n  }));\n}\n\nconst _TextFieldBase = forwardRef(TextFieldBase);\nexport {_TextFieldBase as TextFieldBase};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, useLayoutEffect} from '@react-aria/utils';\nimport React, {RefObject, useCallback, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useControlledState} from '@react-stately/utils';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextArea(props: SpectrumTextFieldProps, ref: RefObject<TextFieldRef>) {\n  props = useProviderProps(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange,\n    ...otherProps\n  } = props;\n\n  // not in stately because this is so we know when to re-measure, which is a spectrum design\n  let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, () => {});\n\n  let inputRef = useRef<HTMLTextAreaElement>();\n\n  let onHeightChange = useCallback(() => {\n    if (isQuiet) {\n      let input = inputRef.current;\n      input.style.height = 'auto';\n      input.style.height = `${input.scrollHeight}px`;\n    }\n  }, [isQuiet, inputRef]);\n\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n\n\n  let {labelProps, inputProps} = useTextField({\n    ...props,\n    onChange: chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n\n  return (\n    <TextFieldBase\n      {...otherProps}\n      ref={ref}\n      inputRef={inputRef}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      multiLine\n      isDisabled={isDisabled}\n      isQuiet={isQuiet}\n      isReadOnly={isReadOnly}\n      isRequired={isRequired} />\n  );\n}\n\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nlet _TextArea = React.forwardRef(TextArea);\nexport {_TextArea as TextArea};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {forwardRef, RefObject, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextField(props: SpectrumTextFieldProps, ref: RefObject<TextFieldRef>) {\n  props = useProviderProps(props);\n\n  let inputRef = useRef<HTMLInputElement>();\n  let {labelProps, inputProps} = useTextField(props, inputRef);\n  return (\n    <TextFieldBase\n      {...props}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      ref={ref}\n      inputRef={inputRef} />\n  );\n}\n\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\nconst _TextField = forwardRef(TextField);\nexport {_TextField as TextField};\n"]},"metadata":{},"sourceType":"module"}