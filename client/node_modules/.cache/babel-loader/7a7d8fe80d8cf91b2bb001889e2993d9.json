{"ast":null,"code":"import { useMeter } from \"@react-aria/meter\";\nimport _react from \"react\";\nimport { ProgressBarBase } from \"@react-spectrum/progress\";\nimport { classNames } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css\n\n\nvar $eae5301468e7259fd99d852e67771$exports = {};\n$eae5301468e7259fd99d852e67771$exports = {\n  \"spectrum-BarLoader\": \"_spectrum-BarLoader_c74d2\",\n  \"spectrum-BarLoader-track\": \"_spectrum-BarLoader-track_c74d2\",\n  \"spectrum-BarLoader-fill\": \"_spectrum-BarLoader-fill_c74d2\",\n  \"spectrum-BarLoader-label\": \"_spectrum-BarLoader-label_c74d2\",\n  \"spectrum-BarLoader-percentage\": \"_spectrum-BarLoader-percentage_c74d2\",\n  \"spectrum-BarLoader--sideLabel\": \"_spectrum-BarLoader--sideLabel_c74d2\",\n  \"spectrum-BarLoader--small\": \"_spectrum-BarLoader--small_c74d2\",\n  \"spectrum-BarLoader--indeterminate\": \"_spectrum-BarLoader--indeterminate_c74d2\",\n  \"indeterminate-loop-ltr\": \"_indeterminate-loop-ltr_c74d2\",\n  \"indeterminate-loop-rtl\": \"_indeterminate-loop-rtl_c74d2\",\n  \"spectrum-BarLoader--overBackground\": \"_spectrum-BarLoader--overBackground_c74d2\",\n  \"is-positive\": \"_is-positive_c74d2\",\n  \"is-warning\": \"_is-warning_c74d2\",\n  \"is-critical\": \"_is-critical_c74d2\"\n};\nvar $eae5301468e7259fd99d852e67771$$interop$default = $parcel$interopDefault($eae5301468e7259fd99d852e67771$exports);\n\nfunction $bcb2e2f8c69b8e81c8ae8ad355ffd7f$var$Meter(props, ref) {\n  let {\n    variant\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"variant\"]);\n\n  const {\n    meterProps,\n    labelProps\n  } = useMeter(props);\n  return /*#__PURE__*/_react.createElement(ProgressBarBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref: ref,\n    barProps: meterProps,\n    labelProps: labelProps,\n    barClassName: classNames($eae5301468e7259fd99d852e67771$$interop$default, {\n      'is-positive': variant === 'positive',\n      'is-warning': variant === 'warning',\n      'is-critical': variant === 'critical'\n    })\n  }));\n}\n/**\n * Meters are visual representations of a quantity or an achievement.\n * Their progress is determined by user actions, rather than system actions.\n */\n\n\nexport let Meter = _react.forwardRef($bcb2e2f8c69b8e81c8ae8ad355ffd7f$var$Meter);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css","packages/@react-spectrum/meter/src/Meter.tsx"],"names":["a","variant","otherProps","labelProps","useMeter","classNames","_Meter","React"],"mappings":";;;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD,C;;;;ACFD,sCAAA,GAAiB;AACf,wBADe,2BAAA;AAEf,8BAFe,iCAAA;AAGf,6BAHe,gCAAA;AAIf,8BAJe,iCAAA;AAKf,mCALe,sCAAA;AAMf,mCANe,sCAAA;AAOf,+BAPe,kCAAA;AAQf,uCARe,0CAAA;AASf,4BATe,+BAAA;AAUf,4BAVe,+BAAA;AAWf,wCAXe,2CAAA;AAYf,iBAZe,oBAAA;AAaf,gBAbe,mBAAA;AAcf,iBAAe;AAdA,CAAjB;;;ACoBA,SAAA,0CAAA,CAAA,KAAA,EAAA,GAAA,EAAuE;AACrE,MAAI;AAACC,IAAAA;AAAD,MAAJ,KAAA;AAAA,MAAiBC,UAAjB,GAAA,mDAAA,CAAA,KAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;AACA,QAAM;AAAA,IAAA,UAAA;AAEJC,IAAAA;AAFI,MAGFC,QAAQ,CAHZ,KAGY,CAHZ;AAKA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,eAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,QAAQ,EAHV,UAAA;AAIE,IAAA,UAAU,EAJZ,UAAA;AAKE,IAAA,YAAY,EACVC,UAAU,CAAA,+CAAA,EAER;AACE,qBAAeJ,OAAO,KADxB,UAAA;AAEE,oBAAcA,OAAO,KAFvB,SAAA;AAGE,qBAAeA,OAAO,KAAK;AAH7B,KAFQ;AANd,GAAA,CAAA,CADF;AAiBD;AAED;;;;;;OAIA,IAAIK,KAAM,GAAGC,MAAK,CAALA,UAAAA,CAAb,0CAAaA,CAAb","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarBase} from '@react-spectrum/progress';\nimport React from 'react';\nimport {SpectrumMeterProps} from '@react-types/meter';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\nimport {useMeter} from '@react-aria/meter';\n\nfunction Meter(props: SpectrumMeterProps, ref: DOMRef<HTMLDivElement>) {\n  let {variant, ...otherProps} = props;\n  const {\n    meterProps,\n    labelProps\n  } = useMeter(props);\n\n  return (\n    <ProgressBarBase\n      {...otherProps}\n      ref={ref}\n      barProps={meterProps}\n      labelProps={labelProps}\n      barClassName={\n        classNames(\n          styles,\n          {\n            'is-positive': variant === 'positive',\n            'is-warning': variant === 'warning',\n            'is-critical': variant === 'critical'\n          }\n        )\n      } />\n  );\n}\n\n/**\n * Meters are visual representations of a quantity or an achievement.\n * Their progress is determined by user actions, rather than system actions.\n */\nlet _Meter = React.forwardRef(Meter);\nexport {_Meter as Meter};\n"]},"metadata":{},"sourceType":"module"}