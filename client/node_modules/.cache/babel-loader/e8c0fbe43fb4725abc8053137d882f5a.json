{"ast":null,"code":"import _react, { forwardRef } from \"react\";\nimport { filterDOMProps } from \"@react-aria/utils\";\nimport { classNames, useDOMRef, useStyleProps } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/well/vars.css\n\n\nvar $da02da2493443b16432bdd47cac91318$exports = {};\n$da02da2493443b16432bdd47cac91318$exports = {\n  \"spectrum-Well\": \"_spectrum-Well_daead\"\n};\nvar $da02da2493443b16432bdd47cac91318$$interop$default = $parcel$interopDefault($da02da2493443b16432bdd47cac91318$exports);\n\nfunction $bd3e6f0b2b67e7ca0478475f0cdb9$var$Well(props, ref) {\n  let {\n    children,\n    role\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"children\", \"role\"]);\n\n  let domRef = useDOMRef(ref);\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n\n  if (!role && (props['aria-label'] || props['aria-labelledby'])) {\n    console.warn('A labelled Well must have a role.');\n  }\n\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps, {\n    labelable: !!role\n  }), styleProps, {\n    role: role,\n    ref: domRef,\n    className: classNames($da02da2493443b16432bdd47cac91318$$interop$default, 'spectrum-Well', styleProps.className)\n  }), children);\n}\n/**\n * A Well is a content container that displays non-editable content separate from other content on the screen.\n * Often this is used to display preformatted text, such as code/markup examples on a documentation page.\n */\n\n\nexport const Well = forwardRef($bd3e6f0b2b67e7ca0478475f0cdb9$var$Well);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/well/vars.css","packages/@react-spectrum/well/src/Well.tsx"],"names":["a","role","otherProps","domRef","useDOMRef","styleProps","useStyleProps","props","console","filterDOMProps","labelable","classNames","_Well","forwardRef"],"mappings":";;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD,C;;;;ACFD,yCAAA,GAAiB;AACf,mBAAiB;AADF,CAAjB;;;ACmBA,SAAA,uCAAA,CAAA,KAAA,EAAA,GAAA,EAAqE;AACnE,MAAI;AAAA,IAAA,QAAA;AAEFC,IAAAA;AAFE,MAAJ,KAAA;AAAA,MAGKC,UAHL,GAAA,mDAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;;AAKA,MAAIC,MAAM,GAAGC,SAAS,CAAtB,GAAsB,CAAtB;AACA,MAAI;AAACC,IAAAA;AAAD,MAAeC,aAAa,CAAhC,UAAgC,CAAhC;;AAEA,MAAI,CAAA,IAAA,KAAUC,KAAK,CAALA,YAAK,CAALA,IAAuBA,KAAK,CAA1C,iBAA0C,CAAtC,CAAJ,EAAgE;AAC9DC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,mCAAAA;AACD;;AAED,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,KAAA,EAAA,8BAAA,CAAA,EAAA,EACMC,cAAc,CAAA,UAAA,EAAa;AAACC,IAAAA,SAAS,EAAE,CAAC,CAACT;AAAd,GAAb,CADpB,EAAA,UAAA,EAAA;AAGE,IAAA,IAAI,EAHN,IAAA;AAIE,IAAA,GAAG,EAJL,MAAA;AAKE,IAAA,SAAS,EAAEU,UAAU,CAAA,kDAAA,EAAA,eAAA,EAGnBN,UAAU,CAHS,SAAA;AALvB,GAAA,CAAA,EADF,QACE,CADF;AAcD;AAED;;;;;;OAIA,MAAMO,IAAK,GAAGC,UAAU,CAAxB,uCAAwB,CAAxB","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React, {forwardRef} from 'react';\nimport {SpectrumWellProps} from '@react-types/well';\nimport styles from '@adobe/spectrum-css-temp/components/well/vars.css';\n\nfunction Well(props: SpectrumWellProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    children,\n    role,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  if (!role && (props['aria-label'] || props['aria-labelledby'])) {\n    console.warn('A labelled Well must have a role.');\n  }\n\n  return (\n    <div\n      {...filterDOMProps(otherProps, {labelable: !!role})}\n      {...styleProps}\n      role={role}\n      ref={domRef}\n      className={classNames(\n        styles,\n        'spectrum-Well',\n        styleProps.className\n      )}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * A Well is a content container that displays non-editable content separate from other content on the screen.\n * Often this is used to display preformatted text, such as code/markup examples on a documentation page.\n */\nconst _Well = forwardRef(Well);\nexport {_Well as Well};\n"]},"metadata":{},"sourceType":"module"}