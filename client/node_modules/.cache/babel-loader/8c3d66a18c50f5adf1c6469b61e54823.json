{"ast":null,"code":"import { useNumberFormatter } from \"@react-aria/i18n\";\nimport { useLabel } from \"@react-aria/label\";\nimport { clamp, filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides the accessibility implementation for a progress bar component.\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\n\nexport function useProgressBar(props) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    valueLabel,\n    isIndeterminate,\n    formatOptions = {\n      style: 'percent'\n    }\n  } = props;\n  let domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    labelProps,\n    fieldProps\n  } = useLabel(_babelRuntimeHelpersEsmExtends({}, props, {\n    // Progress bar is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  }));\n  value = clamp(value, minValue, maxValue);\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let formatter = useNumberFormatter(formatOptions);\n\n  if (!isIndeterminate && !valueLabel) {\n    let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n    valueLabel = formatter.format(valueToFormat);\n  }\n\n  return {\n    progressBarProps: mergeProps(domProps, _babelRuntimeHelpersEsmExtends({}, fieldProps, {\n      'aria-valuenow': isIndeterminate ? undefined : value,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-valuetext': isIndeterminate ? undefined : valueLabel,\n      role: 'progressbar'\n    })),\n    labelProps\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/progress/src/useProgressBar.ts"],"names":["value","minValue","maxValue","formatOptions","style","domProps","filterDOMProps","labelable","fieldProps","useLabel","labelElementType","clamp","percentage","formatter","useNumberFormatter","valueToFormat","valueLabel","progressBarProps","mergeProps","isIndeterminate","role","labelProps"],"mappings":";;;;AAyBA;;;;;;OAKO,SAAA,cAAA,CAAA,KAAA,EAAsE;AAC3E,MAAI;AACFA,IAAAA,KAAK,GADH,CAAA;AAEFC,IAAAA,QAAQ,GAFN,CAAA;AAGFC,IAAAA,QAAQ,GAHN,GAAA;AAAA,IAAA,UAAA;AAAA,IAAA,eAAA;AAMFC,IAAAA,aAAa,GAAG;AACdC,MAAAA,KAAK,EAAE;AADO;AANd,MAAJ,KAAA;AAWA,MAAIC,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAQ;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AACA,MAAI;AAAA,IAAA,UAAA;AAAaC,IAAAA;AAAb,MAA2BC,QAAQ,CAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAErC;AACA;AACAC,IAAAA,gBAAgB,EAAE;AAJmB,GAAA,CAAA,CAAvC;AAOAV,EAAAA,KAAK,GAAGW,KAAK,CAAA,KAAA,EAAA,QAAA,EAAbX,QAAa,CAAbA;AACA,MAAIY,UAAU,GAAG,CAACZ,KAAK,GAAN,QAAA,KAAsBE,QAAQ,GAA/C,QAAiB,CAAjB;AACA,MAAIW,SAAS,GAAGC,kBAAkB,CAAlC,aAAkC,CAAlC;;AAEA,MAAI,CAAA,eAAA,IAAoB,CAAxB,UAAA,EAAqC;AACnC,QAAIC,aAAa,GAAGZ,aAAa,CAAbA,KAAAA,KAAAA,SAAAA,GAAAA,UAAAA,GAApB,KAAA;AACAa,IAAAA,UAAU,GAAGH,SAAS,CAATA,MAAAA,CAAbG,aAAaH,CAAbG;AACD;;AAED,SAAO;AACLC,IAAAA,gBAAgB,EAAEC,UAAU,CAAA,QAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAE1B,uBAAiBC,eAAe,GAAA,SAAA,GAFN,KAAA;AAG1B,uBAH0B,QAAA;AAI1B,uBAJ0B,QAAA;AAK1B,wBAAkBA,eAAe,GAAA,SAAA,GALP,UAAA;AAM1BC,MAAAA,IAAI,EAAE;AANoB,KAAA,CAAA,CADvB;AASLC,IAAAA;AATK,GAAP;AAWD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaProgressBarProps} from '@react-types/progress';\nimport {clamp, filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\nimport {useNumberFormatter} from '@react-aria/i18n';\n\ninterface ProgressBarAria {\n  /** Props for the progress bar container element. */\n  progressBarProps: HTMLAttributes<HTMLElement>,\n  /** Props for the progress bar's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a progress bar component.\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\nexport function useProgressBar(props: AriaProgressBarProps): ProgressBarAria {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    valueLabel,\n    isIndeterminate,\n    formatOptions = {\n      style: 'percent'\n    }\n  } = props;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Progress bar is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  value = clamp(value, minValue, maxValue);\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let formatter = useNumberFormatter(formatOptions);\n\n  if (!isIndeterminate && !valueLabel) {\n    let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n    valueLabel = formatter.format(valueToFormat);\n  }\n\n  return {\n    progressBarProps: mergeProps(domProps, {\n      ...fieldProps,\n      'aria-valuenow': isIndeterminate ? undefined : value,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-valuetext': isIndeterminate ? undefined : valueLabel as string,\n      role: 'progressbar'\n    }),\n    labelProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}