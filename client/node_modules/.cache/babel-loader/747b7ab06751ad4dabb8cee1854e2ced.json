{"ast":null,"code":"import { usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\n\nexport function useLink(props, ref) {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"elementType\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onClick\", \"isDisabled\"]);\n\n  let linkProps;\n\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n\n  let {\n    pressProps\n  } = usePress({\n    onPress,\n    onPressStart,\n    onPressEnd,\n    isDisabled,\n    ref\n  });\n  let domProps = filterDOMProps(otherProps, {\n    labelable: true\n  });\n  return {\n    linkProps: mergeProps(domProps, _babelRuntimeHelpersEsmExtends({}, pressProps, linkProps, {\n      'aria-disabled': isDisabled || undefined,\n      onClick: e => {\n        pressProps.onClick(e);\n\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    }))\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/link/src/useLink.ts"],"names":["elementType","onClick","isDisabled","otherProps","linkProps","role","tabIndex","undefined","pressProps","usePress","ref","domProps","filterDOMProps","labelable","mergeProps","e","deprecatedOnClick","console"],"mappings":";;;;AAgCA;;;;;;OAKO,SAAA,OAAA,CAAA,KAAA,EAAA,GAAA,EAAgF;AACrF,MAAI;AACFA,IAAAA,WAAW,GADT,GAAA;AAAA,IAAA,OAAA;AAAA,IAAA,YAAA;AAAA,IAAA,UAAA;AAKF;AACAC,IAAAA,OAAO,EANL,iBAAA;AAOFC,IAAAA;AAPE,MAAJ,KAAA;AAAA,MAQKC,UARL,GAAA,mDAAA,CAAA,KAAA,EAAA,CAAA,aAAA,EAAA,SAAA,EAAA,cAAA,EAAA,YAAA,EAAA,SAAA,EAAA,YAAA,CAAA,CAAA;;AAWA,MAAA,SAAA;;AACA,MAAIH,WAAW,KAAf,GAAA,EAAyB;AACvBI,IAAAA,SAAS,GAAG;AACVC,MAAAA,IAAI,EADM,MAAA;AAEVC,MAAAA,QAAQ,EAAE,CAAA,UAAA,GAAA,CAAA,GAAkBC;AAFlB,KAAZH;AAID;;AAED,MAAI;AAACI,IAAAA;AAAD,MAAeC,QAAQ,CAAC;AAAA,IAAA,OAAA;AAAA,IAAA,YAAA;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAgDC,IAAAA;AAAhD,GAAD,CAA3B;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAAA,UAAA,EAAa;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAAb,CAA7B;AAEA,SAAO;AACLT,IAAAA,SAAS,EAAEU,UAAU,CAAA,QAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,UAAA,EAAA,SAAA,EAAA;AAGnB,uBAAiBZ,UAAU,IAHR,SAAA;AAInBD,MAAAA,OAAO,EAAGc,CAAD,IAAO;AACdP,QAAAA,UAAU,CAAVA,OAAAA,CAAAA,CAAAA;;AACA,YAAA,iBAAA,EAAuB;AACrBQ,UAAAA,iBAAiB,CAAjBA,CAAiB,CAAjBA;AACAC,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,2CAAAA;AACD;AACF;AAVkB,KAAA,CAAA;AADhB,GAAP;AAcD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<HTMLElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: HTMLAttributes<HTMLElement>;\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n\n  let {pressProps} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true});\n\n  return {\n    linkProps: mergeProps(domProps, {\n      ...pressProps,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: (e) => {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}