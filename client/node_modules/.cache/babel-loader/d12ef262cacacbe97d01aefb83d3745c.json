{"ast":null,"code":"import { useProviderProps } from \"@react-spectrum/provider\";\nimport { Menu, MenuTrigger } from \"@react-spectrum/menu\";\nimport _spectrumIconsUiFolderBreadcrumb from \"@spectrum-icons/ui/FolderBreadcrumb\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useBreadcrumbItem, useBreadcrumbs } from \"@react-aria/breadcrumbs\";\nimport _react, { Fragment, useRef, useCallback } from \"react\";\nimport { mergeProps, useLayoutEffect, useResizeObserver } from \"@react-aria/utils\";\nimport { FocusRing } from \"@react-aria/focus\";\nimport { classNames, getWrappedElement, useDOMRef, useStyleProps, useValueEffect } from \"@react-spectrum/utils\";\nimport _spectrumIconsUiChevronRightSmall from \"@spectrum-icons/ui/ChevronRightSmall\";\nimport { ActionButton } from \"@react-spectrum/button\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport { Item } from \"@react-stately/collections\";\nexport { Item };\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/breadcrumb/vars.css\n\n\nvar $a5baa762b556403ac2f1cf2374238631$exports = {};\n$a5baa762b556403ac2f1cf2374238631$exports = {\n  \"spectrum-Breadcrumbs\": \"_spectrum-Breadcrumbs_e7b3e\",\n  \"spectrum-Breadcrumbs-itemSeparator\": \"_spectrum-Breadcrumbs-itemSeparator_e7b3e\",\n  \"is-reversed\": \"_is-reversed_e7b3e\",\n  \"spectrum-Breadcrumbs-item\": \"_spectrum-Breadcrumbs-item_e7b3e\",\n  \"spectrum-ActionButton\": \"_spectrum-ActionButton_e7b3e\",\n  \"spectrum-Breadcrumbs-itemLink\": \"_spectrum-Breadcrumbs-itemLink_e7b3e\",\n  \"is-hovered\": \"_is-hovered_e7b3e\",\n  \"focus-ring\": \"_focus-ring_e7b3e\",\n  \"is-dragged\": \"_is-dragged_e7b3e\",\n  \"spectrum-Breadcrumbs--small\": \"_spectrum-Breadcrumbs--small_e7b3e\",\n  \"spectrum-Breadcrumbs--medium\": \"_spectrum-Breadcrumbs--medium_e7b3e\",\n  \"spectrum-Breadcrumbs--multiline\": \"_spectrum-Breadcrumbs--multiline_e7b3e\",\n  \"spectrum-Heading--pageTitle\": \"_spectrum-Heading--pageTitle_e7b3e\",\n  \"is-disabled\": \"_is-disabled_e7b3e\",\n  \"is-selected\": \"_is-selected_e7b3e\",\n  \"spectrum-Breadcrumb\": \"_spectrum-Breadcrumb_e7b3e\"\n};\nvar $a5baa762b556403ac2f1cf2374238631$$interop$default = $parcel$interopDefault($a5baa762b556403ac2f1cf2374238631$exports);\n\nfunction $dacda927994e51fbe8a71ffbc$export$BreadcrumbItem(props) {\n  let {\n    children,\n    isCurrent,\n    isDisabled\n  } = props;\n  let {\n    direction\n  } = useLocale();\n  let ref = useRef();\n  let {\n    itemProps\n  } = useBreadcrumbItem(_babelRuntimeHelpersEsmExtends({}, props, {\n    elementType: typeof children === 'string' ? 'span' : 'a'\n  }), ref);\n  let {\n    hoverProps,\n    isHovered\n  } = useHover(props);\n\n  let element = _react.cloneElement(getWrappedElement(children), _babelRuntimeHelpersEsmExtends({}, mergeProps(itemProps, hoverProps), {\n    ref,\n    className: classNames($a5baa762b556403ac2f1cf2374238631$$interop$default, 'spectrum-Breadcrumbs-itemLink', {\n      'is-disabled': !isCurrent && isDisabled,\n      'is-hovered': isHovered\n    })\n  }));\n\n  return /*#__PURE__*/_react.createElement(Fragment, null, /*#__PURE__*/_react.createElement(FocusRing, {\n    focusRingClass: classNames($a5baa762b556403ac2f1cf2374238631$$interop$default, 'focus-ring')\n  }, element), isCurrent === false && /*#__PURE__*/_react.createElement(_spectrumIconsUiChevronRightSmall, {\n    UNSAFE_className: classNames($a5baa762b556403ac2f1cf2374238631$$interop$default, 'spectrum-Breadcrumbs-itemSeparator', {\n      'is-reversed': direction === 'rtl'\n    })\n  }));\n}\n\nconst $ca93a0b524bf6d5b2a180315b966bddc$var$MIN_VISIBLE_ITEMS = 1;\nconst $ca93a0b524bf6d5b2a180315b966bddc$var$MAX_VISIBLE_ITEMS = 4;\n\nfunction $ca93a0b524bf6d5b2a180315b966bddc$var$Breadcrumbs(props, ref) {\n  props = useProviderProps(props);\n\n  let {\n    size = 'L',\n    isMultiline,\n    children,\n    showRoot,\n    isDisabled,\n    onAction\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"size\", \"isMultiline\", \"children\", \"showRoot\", \"isDisabled\", \"onAction\"]); // Not using React.Children.toArray because it mutates the key prop.\n\n\n  let childArray = [];\n\n  _react.Children.forEach(children, child => {\n    if (_react.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n\n  let domRef = useDOMRef(ref);\n  let listRef = useRef(null);\n  let [visibleItems, setVisibleItems] = useValueEffect(childArray.length);\n  let {\n    navProps\n  } = useBreadcrumbs(props);\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  let updateOverflow = useCallback(() => {\n    let computeVisibleItems = visibleItems => {\n      let listItems = Array.from(listRef.current.children);\n      let containerWidth = listRef.current.offsetWidth;\n      let isShowingMenu = childArray.length > visibleItems;\n      let calculatedWidth = 0;\n      let newVisibleItems = 0;\n      let maxVisibleItems = $ca93a0b524bf6d5b2a180315b966bddc$var$MAX_VISIBLE_ITEMS;\n\n      if (showRoot) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        newVisibleItems++;\n      }\n\n      if (isShowingMenu) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        maxVisibleItems--;\n      }\n\n      if (showRoot && calculatedWidth >= containerWidth) {\n        newVisibleItems--;\n      } // TODO: what if multiline and only one breadcrumb??\n\n\n      if (isMultiline) {\n        listItems.pop();\n        newVisibleItems++;\n      } else {\n        // Ensure the last breadcrumb isn't truncated when we measure it.\n        let last = listItems.pop();\n        last.style.overflow = 'visible';\n        calculatedWidth += last.offsetWidth;\n\n        if (calculatedWidth < containerWidth) {\n          newVisibleItems++;\n        }\n\n        last.style.overflow = '';\n      }\n\n      for (let breadcrumb of listItems.reverse()) {\n        calculatedWidth += breadcrumb.offsetWidth;\n\n        if (calculatedWidth < containerWidth) {\n          newVisibleItems++;\n        }\n      }\n\n      return Math.max($ca93a0b524bf6d5b2a180315b966bddc$var$MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));\n    };\n\n    setVisibleItems(function* () {\n      // Update to show all items.\n      yield childArray.length; // Measure, and update to show the items that fit.\n\n      let newVisibleItems = computeVisibleItems(childArray.length);\n      yield newVisibleItems; // If the number of items is less than the number of children,\n      // then update again to ensure that the menu fits.\n\n      if (newVisibleItems < childArray.length && newVisibleItems > 1) {\n        yield computeVisibleItems(newVisibleItems);\n      }\n    });\n  }, [listRef, children, setVisibleItems, showRoot, isMultiline]);\n  useResizeObserver({\n    ref: domRef,\n    onResize: updateOverflow\n  });\n  useLayoutEffect(updateOverflow, [children]);\n  let contents = childArray;\n\n  if (childArray.length > visibleItems) {\n    var _selectedItem$key;\n\n    let selectedItem = childArray[childArray.length - 1];\n    let selectedKey = (_selectedItem$key = selectedItem.key) != null ? _selectedItem$key : childArray.length - 1;\n\n    let onMenuAction = key => {\n      // Don't fire onAction when clicking on the last item\n      if (key !== selectedKey && onAction) {\n        onAction(key);\n      }\n    };\n\n    let menuItem = /*#__PURE__*/_react.createElement($dacda927994e51fbe8a71ffbc$export$BreadcrumbItem, {\n      key: \"menu\"\n    }, /*#__PURE__*/_react.createElement(MenuTrigger, null, /*#__PURE__*/_react.createElement(ActionButton, {\n      \"aria-label\": \"\\u2026\",\n      isQuiet: true,\n      isDisabled: isDisabled\n    }, /*#__PURE__*/_react.createElement(_spectrumIconsUiFolderBreadcrumb, null)), /*#__PURE__*/_react.createElement(Menu, {\n      selectionMode: \"single\",\n      selectedKeys: [selectedKey],\n      onAction: onMenuAction\n    }, childArray)));\n\n    contents = [menuItem];\n    let breadcrumbs = [...childArray];\n    let endItems = visibleItems;\n\n    if (showRoot && visibleItems > 1) {\n      contents.unshift(breadcrumbs.shift());\n      endItems--;\n    }\n\n    contents.push(...breadcrumbs.slice(-endItems));\n  }\n\n  let lastIndex = contents.length - 1;\n  let breadcrumbItems = contents.map((child, index) => {\n    var _child$key;\n\n    let isCurrent = index === lastIndex;\n    let key = (_child$key = child.key) != null ? _child$key : index;\n\n    let onPress = () => {\n      if (onAction) {\n        onAction(key);\n      }\n    };\n\n    return /*#__PURE__*/_react.createElement(\"li\", {\n      key: key,\n      className: classNames($a5baa762b556403ac2f1cf2374238631$$interop$default, 'spectrum-Breadcrumbs-item')\n    }, /*#__PURE__*/_react.createElement($dacda927994e51fbe8a71ffbc$export$BreadcrumbItem, {\n      isCurrent: isCurrent,\n      isDisabled: isDisabled,\n      onPress: onPress\n    }, child.props.children));\n  });\n  return /*#__PURE__*/_react.createElement(\"nav\", _babelRuntimeHelpersEsmExtends({}, styleProps, navProps, {\n    ref: domRef\n  }), /*#__PURE__*/_react.createElement(\"ul\", {\n    ref: listRef,\n    className: classNames($a5baa762b556403ac2f1cf2374238631$$interop$default, 'spectrum-Breadcrumbs', {\n      'spectrum-Breadcrumbs--small': size === 'S',\n      'spectrum-Breadcrumbs--medium': size === 'M',\n      'spectrum-Breadcrumbs--multiline': isMultiline,\n      'spectrum-Breadcrumbs--showRoot': showRoot,\n      'is-disabled': isDisabled\n    }, styleProps.className)\n  }, breadcrumbItems));\n}\n/**\n * Breadcrumbs show hierarchy and navigational context for a userâ€™s location within an application.\n */\n\n\nexport let Breadcrumbs = _react.forwardRef($ca93a0b524bf6d5b2a180315b966bddc$var$Breadcrumbs);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/breadcrumb/vars.css","packages/@react-spectrum/breadcrumbs/src/BreadcrumbItem.tsx","packages/@react-spectrum/breadcrumbs/src/Breadcrumbs.tsx"],"names":["a","isDisabled","direction","useLocale","ref","useRef","itemProps","useBreadcrumbItem","elementType","isHovered","useHover","element","getWrappedElement","mergeProps","className","classNames","isCurrent","MIN_VISIBLE_ITEMS","MAX_VISIBLE_ITEMS","props","useProviderProps","size","onAction","otherProps","childArray","React","child","domRef","useDOMRef","listRef","useValueEffect","navProps","useBreadcrumbs","styleProps","useStyleProps","updateOverflow","useCallback","computeVisibleItems","visibleItems","listItems","Array","containerWidth","isShowingMenu","calculatedWidth","newVisibleItems","maxVisibleItems","showRoot","last","breadcrumb","Math","setVisibleItems","useResizeObserver","onResize","useLayoutEffect","contents","selectedItem","selectedKey","onMenuAction","key","menuItem","breadcrumbs","endItems","lastIndex","breadcrumbItems","index","onPress","_Breadcrumbs"],"mappings":"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","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BreadcrumbItemProps} from '@react-types/breadcrumbs';\nimport ChevronRightSmall from '@spectrum-icons/ui/ChevronRightSmall';\nimport {classNames, getWrappedElement} from '@react-spectrum/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {Fragment, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/breadcrumb/vars.css';\nimport {useBreadcrumbItem} from '@react-aria/breadcrumbs';\nimport {useHover} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\n\nexport function BreadcrumbItem(props: BreadcrumbItemProps) {\n  let {\n    children,\n    isCurrent,\n    isDisabled\n  } = props;\n\n  let {direction} = useLocale();\n  let ref = useRef();\n  let {itemProps} = useBreadcrumbItem({\n    ...props,\n    elementType: typeof children === 'string' ? 'span' : 'a'\n  }, ref);\n  let {hoverProps, isHovered} = useHover(props);\n\n  let element = React.cloneElement(\n    getWrappedElement(children),\n    {\n      ...mergeProps(itemProps, hoverProps),\n      ref,\n      className:\n        classNames(\n          styles,\n          'spectrum-Breadcrumbs-itemLink',\n          {\n            'is-disabled': !isCurrent && isDisabled,\n            'is-hovered': isHovered\n          }\n        )\n    }\n  );\n\n  return (\n    <Fragment>\n      <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n        {element}\n      </FocusRing>\n      {isCurrent === false &&\n        <ChevronRightSmall\n          UNSAFE_className={\n            classNames(\n              styles,\n              'spectrum-Breadcrumbs-itemSeparator',\n              {\n                'is-reversed': direction === 'rtl'\n              }\n            )\n          } />\n      }\n    </Fragment>\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {ActionButton} from '@react-spectrum/button';\nimport {BreadcrumbItem} from './BreadcrumbItem';\nimport {classNames, useDOMRef, useStyleProps, useValueEffect} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport FolderBreadcrumb from '@spectrum-icons/ui/FolderBreadcrumb';\nimport {Menu, MenuTrigger} from '@react-spectrum/menu';\nimport React, {Key, ReactElement, useCallback, useRef} from 'react';\nimport {SpectrumBreadcrumbsProps} from '@react-types/breadcrumbs';\nimport styles from '@adobe/spectrum-css-temp/components/breadcrumb/vars.css';\nimport {useBreadcrumbs} from '@react-aria/breadcrumbs';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useResizeObserver} from '@react-aria/utils';\n\nconst MIN_VISIBLE_ITEMS = 1;\nconst MAX_VISIBLE_ITEMS = 4;\n\nfunction Breadcrumbs<T>(props: SpectrumBreadcrumbsProps<T>, ref: DOMRef) {\n  props = useProviderProps(props);\n  let {\n    size = 'L',\n    isMultiline,\n    children,\n    showRoot,\n    isDisabled,\n    onAction,\n    ...otherProps\n  } = props;\n\n  // Not using React.Children.toArray because it mutates the key prop.\n  let childArray: ReactElement[] = [];\n  React.Children.forEach(children, child => {\n    if (React.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n\n  let domRef = useDOMRef(ref);\n  let listRef = useRef<HTMLUListElement>(null);\n\n  let [visibleItems, setVisibleItems] = useValueEffect(childArray.length);\n\n  let {navProps} = useBreadcrumbs(props);\n  let {styleProps} = useStyleProps(otherProps);\n\n  let updateOverflow = useCallback(() => {\n    let computeVisibleItems = (visibleItems: number) => {\n      let listItems = Array.from(listRef.current.children) as HTMLLIElement[];\n      let containerWidth = listRef.current.offsetWidth;\n      let isShowingMenu = childArray.length > visibleItems;\n      let calculatedWidth = 0;\n      let newVisibleItems = 0;\n      let maxVisibleItems = MAX_VISIBLE_ITEMS;\n\n      if (showRoot) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        newVisibleItems++;\n      }\n\n      if (isShowingMenu) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        maxVisibleItems--;\n      }\n\n      if (showRoot && calculatedWidth >= containerWidth) {\n        newVisibleItems--;\n      }\n\n      // TODO: what if multiline and only one breadcrumb??\n      if (isMultiline) {\n        listItems.pop();\n        newVisibleItems++;\n      } else {\n        // Ensure the last breadcrumb isn't truncated when we measure it.\n        let last = listItems.pop();\n        last.style.overflow = 'visible';\n\n        calculatedWidth += last.offsetWidth;\n        if (calculatedWidth < containerWidth) {\n          newVisibleItems++;\n        }\n\n        last.style.overflow = '';\n      }\n\n      for (let breadcrumb of listItems.reverse()) {\n        calculatedWidth += breadcrumb.offsetWidth;\n        if (calculatedWidth < containerWidth) {\n          newVisibleItems++;\n        }\n      }\n\n      return Math.max(MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));\n    };\n\n    setVisibleItems(function *() {\n      // Update to show all items.\n      yield childArray.length;\n\n      // Measure, and update to show the items that fit.\n      let newVisibleItems = computeVisibleItems(childArray.length);\n      yield newVisibleItems;\n\n      // If the number of items is less than the number of children,\n      // then update again to ensure that the menu fits.\n      if (newVisibleItems < childArray.length && newVisibleItems > 1) {\n        yield computeVisibleItems(newVisibleItems);\n      }\n    });\n  }, [listRef, children, setVisibleItems, showRoot, isMultiline]);\n\n  useResizeObserver({ref: domRef, onResize: updateOverflow});\n\n  useLayoutEffect(updateOverflow, [children]);\n\n  let contents = childArray;\n  if (childArray.length > visibleItems) {\n    let selectedItem = childArray[childArray.length - 1];\n    let selectedKey = selectedItem.key ?? childArray.length - 1;\n    let onMenuAction = (key: Key) => {\n      // Don't fire onAction when clicking on the last item\n      if (key !== selectedKey && onAction) {\n        onAction(key);\n      }\n    };\n\n    let menuItem = (\n      <BreadcrumbItem key=\"menu\">\n        <MenuTrigger>\n          <ActionButton\n            aria-label=\"â€¦\"\n            isQuiet\n            isDisabled={isDisabled}>\n            <FolderBreadcrumb />\n          </ActionButton>\n          <Menu selectionMode=\"single\" selectedKeys={[selectedKey]} onAction={onMenuAction}>\n            {childArray}\n          </Menu>\n        </MenuTrigger>\n      </BreadcrumbItem>\n    );\n\n    contents = [menuItem];\n    let breadcrumbs = [...childArray];\n    let endItems = visibleItems;\n    if (showRoot && visibleItems > 1) {\n      contents.unshift(breadcrumbs.shift());\n      endItems--;\n    }\n    contents.push(...breadcrumbs.slice(-endItems));\n  }\n\n  let lastIndex = contents.length - 1;\n  let breadcrumbItems = contents.map((child, index) => {\n    let isCurrent = index === lastIndex;\n    let key = child.key ?? index;\n    let onPress = () => {\n      if (onAction) {\n        onAction(key);\n      }\n    };\n\n    return (\n      <li\n        key={key}\n        className={\n          classNames(\n            styles,\n            'spectrum-Breadcrumbs-item'\n          )\n        }>\n        <BreadcrumbItem\n          isCurrent={isCurrent}\n          isDisabled={isDisabled}\n          onPress={onPress}>\n          {child.props.children}\n        </BreadcrumbItem>\n      </li>\n    );\n  });\n\n  return (\n    <nav\n      {...styleProps}\n      {...navProps}\n      ref={domRef}>\n      <ul\n        ref={listRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-Breadcrumbs',\n            {\n              'spectrum-Breadcrumbs--small': size === 'S',\n              'spectrum-Breadcrumbs--medium': size === 'M',\n              'spectrum-Breadcrumbs--multiline': isMultiline,\n              'spectrum-Breadcrumbs--showRoot': showRoot,\n              'is-disabled': isDisabled\n            },\n            styleProps.className\n          )\n        }>\n        {breadcrumbItems}\n      </ul>\n    </nav>\n  );\n}\n\n/**\n * Breadcrumbs show hierarchy and navigational context for a userâ€™s location within an application.\n */\nlet _Breadcrumbs = React.forwardRef(Breadcrumbs);\nexport {_Breadcrumbs as Breadcrumbs};\n"]},"metadata":{},"sourceType":"module"}