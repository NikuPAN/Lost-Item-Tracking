{"ast":null,"code":"import _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport _intlMessageformat from \"intl-messageformat\";\nimport { useIsSSR } from \"@react-aria/ssr\";\nimport _react, { useEffect, useState, useContext, useCallback, useRef } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// https://en.wikipedia.org/wiki/Right-to-left\n\nconst $d26e725ad56fbcb2c25f52b7de27$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nconst $d26e725ad56fbcb2c25f52b7de27$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);\n/**\n * Determines if a locale is read right to left using [Intl.Locale]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale}.\n */\n\nfunction $d26e725ad56fbcb2c25f52b7de27$export$isRTL(locale) {\n  // If the Intl.Locale API is available, use it to get the script for the locale.\n  // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    let script = new Intl.Locale(locale).maximize().script;\n    return $d26e725ad56fbcb2c25f52b7de27$var$RTL_SCRIPTS.has(script);\n  } // If not, just guess by the language (first part of the locale)\n\n\n  let lang = locale.split('-')[0];\n  return $d26e725ad56fbcb2c25f52b7de27$var$RTL_LANGS.has(lang);\n}\n\nfunction $d26e725ad56fbcb2c25f52b7de27$export$numberFormatSignDisplayPolyfill(numberFormat, signDisplay, num) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num); // ignore RTL/LTR marker character\n\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n/**\n * Gets the locale setting of the browser.\n */\n\n\nfunction $e851d0b81d46abd5f971c8e95c27f1$export$getDefaultLocale() {\n  // @ts-ignore\n  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';\n  return {\n    locale,\n    direction: $d26e725ad56fbcb2c25f52b7de27$export$isRTL(locale) ? 'rtl' : 'ltr'\n  };\n}\n\nlet $e851d0b81d46abd5f971c8e95c27f1$var$currentLocale = $e851d0b81d46abd5f971c8e95c27f1$export$getDefaultLocale();\nlet $e851d0b81d46abd5f971c8e95c27f1$var$listeners = new Set();\n\nfunction $e851d0b81d46abd5f971c8e95c27f1$var$updateLocale() {\n  $e851d0b81d46abd5f971c8e95c27f1$var$currentLocale = $e851d0b81d46abd5f971c8e95c27f1$export$getDefaultLocale();\n\n  for (let listener of $e851d0b81d46abd5f971c8e95c27f1$var$listeners) {\n    listener($e851d0b81d46abd5f971c8e95c27f1$var$currentLocale);\n  }\n}\n/**\n * Returns the current browser/system language, and updates when it changes.\n */\n\n\nfunction $e851d0b81d46abd5f971c8e95c27f1$export$useDefaultLocale() {\n  let isSSR = useIsSSR();\n  let [defaultLocale, setDefaultLocale] = useState($e851d0b81d46abd5f971c8e95c27f1$var$currentLocale);\n  useEffect(() => {\n    if ($e851d0b81d46abd5f971c8e95c27f1$var$listeners.size === 0) {\n      window.addEventListener('languagechange', $e851d0b81d46abd5f971c8e95c27f1$var$updateLocale);\n    }\n\n    $e851d0b81d46abd5f971c8e95c27f1$var$listeners.add(setDefaultLocale);\n    return () => {\n      $e851d0b81d46abd5f971c8e95c27f1$var$listeners.delete(setDefaultLocale);\n\n      if ($e851d0b81d46abd5f971c8e95c27f1$var$listeners.size === 0) {\n        window.removeEventListener('languagechange', $e851d0b81d46abd5f971c8e95c27f1$var$updateLocale);\n      }\n    };\n  }, []); // We cannot determine the browser's language on the server, so default to\n  // en-US. This will be updated after hydration on the client to the correct value.\n\n  if (isSSR) {\n    return {\n      locale: 'en-US',\n      direction: 'ltr'\n    };\n  }\n\n  return defaultLocale;\n}\n\nconst $cff8541df3b5c83067b2ab3ee0d20$var$I18nContext = _react.createContext(null);\n\nexport function I18nProvider(props) {\n  let {\n    locale,\n    children\n  } = props;\n  let defaultLocale = $e851d0b81d46abd5f971c8e95c27f1$export$useDefaultLocale();\n  let value = locale ? {\n    locale,\n    direction: $d26e725ad56fbcb2c25f52b7de27$export$isRTL(locale) ? 'rtl' : 'ltr'\n  } : defaultLocale;\n  return /*#__PURE__*/_react.createElement($cff8541df3b5c83067b2ab3ee0d20$var$I18nContext.Provider, {\n    value: value\n  }, children);\n}\n/**\n * Returns the current locale and layout direction.\n */\n\nexport function useLocale() {\n  let defaultLocale = $e851d0b81d46abd5f971c8e95c27f1$export$useDefaultLocale();\n  let context = useContext($cff8541df3b5c83067b2ab3ee0d20$var$I18nContext);\n  return context || defaultLocale;\n}\nconst $f58d206cee90f9c2bf3c03e4522c35$var$formatterCache = new Map();\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n */\n\nexport function useMessageFormatter(strings) {\n  let {\n    locale: currentLocale\n  } = useLocale(); // Check the cache\n\n  let localeCache = $f58d206cee90f9c2bf3c03e4522c35$var$formatterCache.get(strings);\n\n  if (localeCache && localeCache.has(currentLocale)) {\n    return localeCache.get(currentLocale);\n  } // Add to the formatter cache if needed\n\n\n  if (!localeCache) {\n    localeCache = new Map();\n    $f58d206cee90f9c2bf3c03e4522c35$var$formatterCache.set(strings, localeCache);\n  } // Get the strings for the current locale\n\n\n  let localeStrings = $f58d206cee90f9c2bf3c03e4522c35$var$selectLocale(strings, currentLocale); // Create a new message formatter\n\n  let cache = {};\n\n  let formatMessage = (key, variables) => {\n    let message = cache[key + '.' + currentLocale];\n\n    if (!message) {\n      let msg = localeStrings[key];\n\n      if (!msg) {\n        throw new Error(\"Could not find intl message \" + key + \" in \" + currentLocale + \" locale\");\n      }\n\n      message = new _intlMessageformat(msg, currentLocale);\n      cache[key] = message;\n    }\n\n    return message.format(variables);\n  };\n\n  localeCache.set(currentLocale, formatMessage);\n  return formatMessage;\n}\n\nfunction $f58d206cee90f9c2bf3c03e4522c35$var$selectLocale(strings, locale) {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  } // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n\n\n  let language = $f58d206cee90f9c2bf3c03e4522c35$var$getLanguage(locale);\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  } // Nothing close, use english.\n\n\n  return strings['en-US'];\n}\n\nfunction $f58d206cee90f9c2bf3c03e4522c35$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n\nlet $b0007c63a64054c318efb8b6cd0053f$var$formatterCache = new Map();\n/**\n * Provides localized date formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the date formatter for performance.\n * @param options - Formatting options.\n */\n\nexport function useDateFormatter(options) {\n  let {\n    locale\n  } = useLocale();\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n\n  if ($b0007c63a64054c318efb8b6cd0053f$var$formatterCache.has(cacheKey)) {\n    return $b0007c63a64054c318efb8b6cd0053f$var$formatterCache.get(cacheKey);\n  }\n\n  let formatter = new Intl.DateTimeFormat(locale, options);\n  $b0007c63a64054c318efb8b6cd0053f$var$formatterCache.set(cacheKey, formatter);\n  return formatter;\n}\n/**\n * Provides localized number parsing for the current locale.\n * Idea from https://observablehq.com/@mbostock/localized-number-parsing.\n */\n\nexport function useNumberParser() {\n  let {\n    locale\n  } = useLocale();\n  const numberData = useRef({\n    group: null,\n    decimal: null,\n    numeral: null,\n    index: null\n  });\n  useEffect(() => {\n    const parts = new Intl.NumberFormat(locale).formatToParts(12345.6);\n    const numerals = [...new Intl.NumberFormat(locale, {\n      useGrouping: false\n    }).format(9876543210)].reverse();\n    const index = new Map(numerals.map((d, i) => [d, i]));\n    numberData.current.group = new RegExp(\"[\" + parts.find(d => d.type === 'group').value + \"]\", 'g');\n    numberData.current.decimal = new RegExp(\"[\" + parts.find(d => d.type === 'decimal').value + \"]\");\n    numberData.current.numeral = new RegExp(\"[\" + numerals.join('') + \"]\", 'g');\n\n    numberData.current.index = d => index.get(d);\n  }, [locale]);\n  const parse = useCallback(value => {\n    value = value.trim().replace(numberData.current.group, '').replace(numberData.current.decimal, '.').replace(numberData.current.numeral, numberData.current.index);\n    return value ? +value : NaN;\n  }, []);\n  return {\n    parse\n  };\n}\nlet $ece3e138e83d330f42860705a2ec18a$var$formatterCache = new Map();\nlet $ece3e138e83d330f42860705a2ec18a$var$supportsSignDisplay = false;\n\ntry {\n  // @ts-ignore\n  $ece3e138e83d330f42860705a2ec18a$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {\n    signDisplay: 'exceptZero'\n  }).resolvedOptions().signDisplay === 'exceptZero'; // eslint-disable-next-line no-empty\n} catch (e) {}\n/**\n * Provides localized number formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the number formatter for performance.\n * @param options - Formatting options.\n */\n\n\nexport function useNumberFormatter(options) {\n  let {\n    locale\n  } = useLocale();\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n\n  if ($ece3e138e83d330f42860705a2ec18a$var$formatterCache.has(cacheKey)) {\n    return $ece3e138e83d330f42860705a2ec18a$var$formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options); // @ts-ignore\n\n  let {\n    signDisplay\n  } = options || {};\n  $ece3e138e83d330f42860705a2ec18a$var$formatterCache.set(cacheKey, !$ece3e138e83d330f42860705a2ec18a$var$supportsSignDisplay && signDisplay != null ? new Proxy(numberFormatter, {\n    get(target, property) {\n      if (property === 'format') {\n        return v => $d26e725ad56fbcb2c25f52b7de27$export$numberFormatSignDisplayPolyfill(numberFormatter, signDisplay, v);\n      } else {\n        return target[property];\n      }\n    }\n\n  }) : numberFormatter);\n  return numberFormatter;\n}\nlet $a4045a18d7252bf6de9312e613c4e$var$cache = new Map();\n/**\n * Provides localized string collation for the current locale. Automatically updates when the locale changes,\n * and handles caching of the collator for performance.\n * @param options - Collator options.\n */\n\nexport function useCollator(options) {\n  let {\n    locale\n  } = useLocale();\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n\n  if ($a4045a18d7252bf6de9312e613c4e$var$cache.has(cacheKey)) {\n    return $a4045a18d7252bf6de9312e613c4e$var$cache.get(cacheKey);\n  }\n\n  let formatter = new Intl.Collator(locale, options);\n  $a4045a18d7252bf6de9312e613c4e$var$cache.set(cacheKey, formatter);\n  return formatter;\n}\n/**\n * Provides localized string search functionality that is useful for filtering or matching items\n * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.\n */\n\nexport function useFilter(options) {\n  let collator = useCollator(_babelRuntimeHelpersEsmExtends({\n    usage: 'search'\n  }, options)); // TODO(later): these methods don't currently support the ignorePunctuation option.\n\n  return {\n    startsWith(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      } // Normalize both strings so we can slice safely\n      // TODO: take into account the ignorePunctuation option as well...\n\n\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(0, substring.length), substring) === 0;\n    },\n\n    endsWith(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      }\n\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(-substring.length), substring) === 0;\n    },\n\n    contains(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      }\n\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      let scan = 0;\n      let sliceLen = substring.length;\n\n      for (; scan + sliceLen <= string.length; scan++) {\n        let slice = string.slice(scan, scan + sliceLen);\n\n        if (collator.compare(substring, slice) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/i18n/src/utils.ts","packages/@react-aria/i18n/src/useDefaultLocale.ts","packages/@react-aria/i18n/src/context.tsx","packages/@react-aria/i18n/src/useMessageFormatter.ts","packages/@react-aria/i18n/src/useDateFormatter.ts","packages/@react-aria/i18n/src/useNumberParser.ts","packages/@react-aria/i18n/src/useNumberFormatter.ts","packages/@react-aria/i18n/src/useCollator.ts","packages/@react-aria/i18n/src/useFilter.ts"],"names":["RTL_SCRIPTS","RTL_LANGS","Intl","script","lang","locale","signDisplay","numberFormat","Math","needsPositiveSign","num","Object","negative","noSign","minus","console","positive","navigator","direction","currentLocale","getDefaultLocale","listeners","listener","isSSR","useIsSSR","useState","useEffect","window","I18nContext","React","children","defaultLocale","value","context","useContext","formatterCache","localeCache","localeStrings","selectLocale","cache","formatMessage","message","key","msg","strings","language","getLanguage","cacheKey","options","a","b","formatter","numberData","useRef","group","decimal","numeral","index","parts","numerals","useGrouping","d","parse","useCallback","supportsSignDisplay","numberFormatter","get","property","v","target","collator","usage","startsWith","substring","string","endsWith","contains","scan","sliceLen","slice"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// https://en.wikipedia.org/wiki/Right-to-left\nconst RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nconst RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);\n\n/**\n * Determines if a locale is read right to left using [Intl.Locale]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale}.\n */\nexport function isRTL(locale: string) {\n  // If the Intl.Locale API is available, use it to get the script for the locale.\n  // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    let script = new Intl.Locale(locale).maximize().script;\n    return RTL_SCRIPTS.has(script);\n  }\n\n  // If not, just guess by the language (first part of the locale)\n  let lang = locale.split('-')[0];\n  return RTL_LANGS.has(lang);\n}\n\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: 'always' | 'exceptZero' | 'auto' | 'never', num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Direction} from '@react-types/shared';\nimport {isRTL} from './utils';\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport interface Locale {\n  /** The [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt) language code for the locale. */\n  locale: string,\n  /** The writing direction for the locale. */\n  direction: Direction\n}\n\n/**\n * Gets the locale setting of the browser.\n */\nexport function getDefaultLocale(): Locale {\n  // @ts-ignore\n  let locale = (typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage)) || 'en-US';\n  return {\n    locale,\n    direction: isRTL(locale) ? 'rtl' : 'ltr'\n  };\n}\n\nlet currentLocale = getDefaultLocale();\nlet listeners = new Set<(locale: Locale) => void>();\n\nfunction updateLocale() {\n  currentLocale = getDefaultLocale();\n  for (let listener of listeners) {\n    listener(currentLocale);\n  }\n}\n\n/**\n * Returns the current browser/system language, and updates when it changes.\n */\nexport function useDefaultLocale(): Locale {\n  let isSSR = useIsSSR();\n  let [defaultLocale, setDefaultLocale] = useState(currentLocale);\n\n  useEffect(() => {\n    if (listeners.size === 0) {\n      window.addEventListener('languagechange', updateLocale);\n    }\n\n    listeners.add(setDefaultLocale);\n\n    return () => {\n      listeners.delete(setDefaultLocale);\n      if (listeners.size === 0) {\n        window.removeEventListener('languagechange', updateLocale);\n      }\n    };\n  }, []);\n\n  // We cannot determine the browser's language on the server, so default to\n  // en-US. This will be updated after hydration on the client to the correct value.\n  if (isSSR) {\n    return {\n      locale: 'en-US',\n      direction: 'ltr'\n    };\n  }\n\n  return defaultLocale;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isRTL} from './utils';\nimport {Locale, useDefaultLocale} from './useDefaultLocale';\nimport React, {ReactNode, useContext} from 'react';\n\ninterface ProviderProps {\n  /** Contents that should have the locale applied. */\n  children: ReactNode,\n  /** The locale to apply to the children. */\n  locale?: string\n}\n\nconst I18nContext = React.createContext<Locale>(null);\n\n/**\n * Provides the locale for the application to all child components.\n */\nexport function I18nProvider(props: ProviderProps) {\n  let {locale, children} = props;\n  let defaultLocale = useDefaultLocale();\n\n  let value: Locale = locale ? {\n    locale,\n    direction: isRTL(locale) ? 'rtl' : 'ltr'\n  } : defaultLocale;\n\n  return (\n    <I18nContext.Provider value={value}>\n      {children}\n    </I18nContext.Provider>\n  );\n}\n\n/**\n * Returns the current locale and layout direction.\n */\nexport function useLocale(): Locale {\n  let defaultLocale = useDefaultLocale();\n  let context = useContext(I18nContext);\n  return context || defaultLocale;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport IntlMessageFormat from 'intl-messageformat';\nimport {useLocale} from './context';\n\ntype MessageFormatterStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\ntype FormatMessage = (key: string, variables?: {[key: string]: any}) => string;\n\nconst formatterCache = new Map();\n\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n */\nexport function useMessageFormatter(strings: MessageFormatterStrings): FormatMessage {\n  let {locale: currentLocale} = useLocale();\n\n  // Check the cache\n  let localeCache = formatterCache.get(strings);\n  if (localeCache && localeCache.has(currentLocale)) {\n    return localeCache.get(currentLocale);\n  }\n\n  // Add to the formatter cache if needed\n  if (!localeCache) {\n    localeCache = new Map();\n    formatterCache.set(strings, localeCache);\n  }\n\n  // Get the strings for the current locale\n  let localeStrings = selectLocale(strings, currentLocale);\n\n  // Create a new message formatter\n  let cache = {};\n  let formatMessage = (key, variables) => {\n    let message = cache[key + '.' + currentLocale];\n    if (!message) {\n      let msg = localeStrings[key];\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${currentLocale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, currentLocale);\n      cache[key] = message;\n    }\n\n    return message.format(variables);\n  };\n\n  localeCache.set(currentLocale, formatMessage);\n  return formatMessage;\n}\n\nfunction selectLocale(strings, locale) {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  let language = getLanguage(locale);\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings['en-US'];\n}\n\nfunction getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useLocale} from './context';\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\n/**\n * Provides localized date formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the date formatter for performance.\n * @param options - Formatting options.\n */\nexport function useDateFormatter(options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  let {locale} = useLocale();\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let formatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, formatter);\n  return formatter;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef} from 'react';\nimport {useLocale} from './context';\n\ntype NumberParser = {\n  parse: (value:string) => number\n}\n\n/**\n * Provides localized number parsing for the current locale.\n * Idea from https://observablehq.com/@mbostock/localized-number-parsing.\n */\nexport function useNumberParser(): NumberParser {\n  let {locale} = useLocale();\n  const numberData = useRef({group: null, decimal: null, numeral: null, index: null});\n\n  useEffect(() => {\n    const parts = new Intl.NumberFormat(locale).formatToParts(12345.6);\n    const numerals = [...new Intl.NumberFormat(locale, {useGrouping: false}).format(9876543210)].reverse();\n    const index = new Map(numerals.map((d, i) => [d, i]));\n    \n    numberData.current.group = new RegExp(`[${parts.find(d => d.type === 'group').value}]`, 'g');\n    numberData.current.decimal = new RegExp(`[${parts.find(d => d.type === 'decimal').value}]`);\n    numberData.current.numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n    numberData.current.index = d => index.get(d);\n  },  [locale]);\n\n  const parse = useCallback((value:string) => {\n    value = value.trim()\n      .replace(numberData.current.group, '')\n      .replace(numberData.current.decimal, '.')\n      .replace(numberData.current.numeral, numberData.current.index);\n    return value ? +value : NaN;\n  }, []);\n\n  return  {parse};\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {numberFormatSignDisplayPolyfill} from './utils';\nimport {useLocale} from './context';\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n/**\n * Provides localized number formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the number formatter for performance.\n * @param options - Formatting options.\n */\nexport function useNumberFormatter(options?: Intl.NumberFormatOptions): Intl.NumberFormat {\n  let {locale} = useLocale();\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  // @ts-ignore\n  let {signDisplay} = options || {};\n  formatterCache.set(cacheKey, (!supportsSignDisplay && signDisplay != null) ? new Proxy(numberFormatter, {\n    get(target, property) {\n      if (property === 'format') {\n        return (v) => numberFormatSignDisplayPolyfill(numberFormatter, signDisplay, v);\n      } else {\n        return target[property];\n      }\n    }\n  }) : numberFormatter);\n  return numberFormatter;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useLocale} from './context';\n\nlet cache = new Map<string, Intl.Collator>();\n\n/**\n * Provides localized string collation for the current locale. Automatically updates when the locale changes,\n * and handles caching of the collator for performance.\n * @param options - Collator options.\n */\nexport function useCollator(options?: Intl.CollatorOptions): Intl.Collator {\n  let {locale} = useLocale();\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (cache.has(cacheKey)) {\n    return cache.get(cacheKey);\n  }\n\n  let formatter = new Intl.Collator(locale, options);\n  cache.set(cacheKey, formatter);\n  return formatter;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCollator} from './useCollator';\n\ninterface Filter {\n  /** Returns whether a string starts with a given substring. */\n  startsWith(string: string, substring: string): boolean,\n  /** Returns whether a string ends with a given substring. */\n  endsWith(string: string, substring: string): boolean,\n  /** Returns whether a string contains a given substring. */\n  contains(string: string, substring: string): boolean\n}\n\n/**\n * Provides localized string search functionality that is useful for filtering or matching items\n * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.\n */\nexport function useFilter(options?: Intl.CollatorOptions): Filter {\n  let collator = useCollator({\n    usage: 'search',\n    ...options\n  });\n\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n\n  return {\n    startsWith(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      }\n\n      // Normalize both strings so we can slice safely\n      // TODO: take into account the ignorePunctuation option as well...\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(0, substring.length), substring) === 0;\n    },\n    endsWith(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      }\n\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n      return collator.compare(string.slice(-substring.length), substring) === 0;\n    },\n    contains(string, substring) {\n      if (substring.length === 0) {\n        return true;\n      }\n\n      string = string.normalize('NFC');\n      substring = substring.normalize('NFC');\n\n      let scan = 0;\n      let sliceLen = substring.length;\n      for (; scan + sliceLen <= string.length; scan++) {\n        let slice = string.slice(scan, scan + sliceLen);\n        if (collator.compare(substring, slice) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}