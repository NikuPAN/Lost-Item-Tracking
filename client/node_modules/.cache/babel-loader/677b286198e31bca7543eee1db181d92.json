{"ast":null,"code":"import { useProgressBar } from \"@react-aria/progress\";\nimport _react from \"react\";\nimport { clamp } from \"@react-aria/utils\";\nimport { classNames, useDOMRef, useStyleProps } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css\n\n\nvar $eae5301468e7259fd99d852e67771$exports = {};\n$eae5301468e7259fd99d852e67771$exports = {\n  \"spectrum-BarLoader\": \"_spectrum-BarLoader_c74d2\",\n  \"spectrum-BarLoader-track\": \"_spectrum-BarLoader-track_c74d2\",\n  \"spectrum-BarLoader-fill\": \"_spectrum-BarLoader-fill_c74d2\",\n  \"spectrum-BarLoader-label\": \"_spectrum-BarLoader-label_c74d2\",\n  \"spectrum-BarLoader-percentage\": \"_spectrum-BarLoader-percentage_c74d2\",\n  \"spectrum-BarLoader--sideLabel\": \"_spectrum-BarLoader--sideLabel_c74d2\",\n  \"spectrum-BarLoader--small\": \"_spectrum-BarLoader--small_c74d2\",\n  \"spectrum-BarLoader--indeterminate\": \"_spectrum-BarLoader--indeterminate_c74d2\",\n  \"indeterminate-loop-ltr\": \"_indeterminate-loop-ltr_c74d2\",\n  \"indeterminate-loop-rtl\": \"_indeterminate-loop-rtl_c74d2\",\n  \"spectrum-BarLoader--overBackground\": \"_spectrum-BarLoader--overBackground_c74d2\",\n  \"is-positive\": \"_is-positive_c74d2\",\n  \"is-warning\": \"_is-warning_c74d2\",\n  \"is-critical\": \"_is-critical_c74d2\"\n};\nvar $eae5301468e7259fd99d852e67771$$interop$default = $parcel$interopDefault($eae5301468e7259fd99d852e67771$exports); // Base ProgressBar component shared with Meter.\n\nfunction $c5cde9743903482bb7abecafb119431a$var$ProgressBarBase(props, ref) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label,\n    barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps,\n    labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"value\", \"minValue\", \"maxValue\", \"size\", \"label\", \"barClassName\", \"showValueLabel\", \"labelPosition\", \"isIndeterminate\", \"barProps\", \"labelProps\", \"aria-label\", \"aria-labelledby\"]);\n\n  let domRef = useDOMRef(ref);\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  value = clamp(value, minValue, maxValue);\n  let barStyle = {};\n\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = Math.round(percentage * 100) + \"%\";\n  } // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n\n\n  if (!label && !ariaLabel && !ariaLabelledby) {\n    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, styleProps, barProps, {\n    ref: domRef,\n    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader', {\n      'spectrum-BarLoader--small': size === 'S',\n      'spectrum-BarLoader--large': size === 'L',\n      'spectrum-BarLoader--indeterminate': isIndeterminate,\n      'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n    }, barClassName, styleProps.className)\n  }), label && /*#__PURE__*/_react.createElement(\"span\", _babelRuntimeHelpersEsmExtends({}, labelProps, {\n    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-label')\n  }), label), showValueLabel && /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-percentage')\n  }, barProps['aria-valuetext']), /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-track')\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-fill'),\n    style: barStyle\n  })));\n}\n\nexport let ProgressBarBase = _react.forwardRef($c5cde9743903482bb7abecafb119431a$var$ProgressBarBase);\n\nfunction $f18373465a3261d8a2c5beeda930081$var$ProgressBar(props, ref) {\n  let {\n    variant\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"variant\"]);\n\n  const {\n    progressBarProps,\n    labelProps\n  } = useProgressBar(props);\n  return /*#__PURE__*/_react.createElement(ProgressBarBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref: ref,\n    barProps: progressBarProps,\n    labelProps: labelProps,\n    barClassName: classNames($eae5301468e7259fd99d852e67771$$interop$default, {\n      'spectrum-BarLoader--overBackground': variant === 'overBackground'\n    })\n  }));\n}\n/**\n * ProgressBars show the progression of a system operation: downloading, uploading, processing, etc., in a visual way.\n * They can represent either determinate or indeterminate progress.\n */\n\n\nexport let ProgressBar = _react.forwardRef($f18373465a3261d8a2c5beeda930081$var$ProgressBar); // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/circleloader/vars.css\n\nvar $ac0b16ab45b43a13bd626652200d2$exports = {};\n$ac0b16ab45b43a13bd626652200d2$exports = {\n  \"spectrum-CircleLoader--indeterminate-fill-submask-2\": \"_spectrum-CircleLoader--indeterminate-fill-submask-2_40b43\",\n  \"spectrum-fill-mask-2\": \"_spectrum-fill-mask-2_40b43\",\n  \"spectrum-CircleLoader\": \"_spectrum-CircleLoader_40b43\",\n  \"spectrum-CircleLoader-track\": \"_spectrum-CircleLoader-track_40b43\",\n  \"spectrum-CircleLoader-fills\": \"_spectrum-CircleLoader-fills_40b43\",\n  \"spectrum-CircleLoader-fill\": \"_spectrum-CircleLoader-fill_40b43\",\n  \"spectrum-CircleLoader-fillMask1\": \"_spectrum-CircleLoader-fillMask1_40b43\",\n  \"spectrum-CircleLoader-fillMask2\": \"_spectrum-CircleLoader-fillMask2_40b43\",\n  \"spectrum-CircleLoader-fillSubMask1\": \"_spectrum-CircleLoader-fillSubMask1_40b43\",\n  \"spectrum-CircleLoader-fillSubMask2\": \"_spectrum-CircleLoader-fillSubMask2_40b43\",\n  \"spectrum-CircleLoader--small\": \"_spectrum-CircleLoader--small_40b43\",\n  \"spectrum-CircleLoader--large\": \"_spectrum-CircleLoader--large_40b43\",\n  \"spectrum-CircleLoader--indeterminate\": \"_spectrum-CircleLoader--indeterminate_40b43\",\n  \"spectrum-fills-rotate\": \"_spectrum-fills-rotate_40b43\",\n  \"spectrum-fill-mask-1\": \"_spectrum-fill-mask-1_40b43\",\n  \"spectrum-CircleLoader--overBackground\": \"_spectrum-CircleLoader--overBackground_40b43\"\n};\nvar $ac0b16ab45b43a13bd626652200d2$$interop$default = $parcel$interopDefault($ac0b16ab45b43a13bd626652200d2$exports);\n\nfunction $e712ab91a3ca4a742ab6443c53b96b8$var$ProgressCircle(props, ref) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'M',\n    variant,\n    isIndeterminate = false,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"value\", \"minValue\", \"maxValue\", \"size\", \"variant\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\"]);\n\n  let domRef = useDOMRef(ref);\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  value = clamp(value, minValue, maxValue);\n  let {\n    progressBarProps\n  } = useProgressBar(_babelRuntimeHelpersEsmExtends({}, props, {\n    value\n  }));\n  let subMask1Style = {};\n  let subMask2Style = {};\n\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue) * 100;\n    let angle;\n\n    if (percentage > 0 && percentage <= 50) {\n      angle = -180 + percentage / 50 * 180;\n      subMask1Style.transform = \"rotate(\" + angle + \"deg)\";\n      subMask2Style.transform = 'rotate(-180deg)';\n    } else if (percentage > 50) {\n      angle = -180 + (percentage - 50) / 50 * 180;\n      subMask1Style.transform = 'rotate(0deg)';\n      subMask2Style.transform = \"rotate(\" + angle + \"deg)\";\n    }\n  }\n\n  if (!ariaLabel && !ariaLabelledby) {\n    console.warn('ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, styleProps, progressBarProps, {\n    ref: domRef,\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader', {\n      'spectrum-CircleLoader--indeterminate': isIndeterminate,\n      'spectrum-CircleLoader--small': size === 'S',\n      'spectrum-CircleLoader--large': size === 'L',\n      'spectrum-CircleLoader--overBackground': variant === 'overBackground'\n    }, styleProps.className)\n  }), /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-track')\n  }), /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fills')\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillMask1')\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillSubMask1'),\n    style: subMask1Style\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fill')\n  }))), /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillMask2')\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillSubMask2'),\n    style: subMask2Style\n  }, /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fill')\n  })))));\n}\n/**\n * ProgressCircles show the progression of a system operation such as downloading, uploading, processing, etc. in a visual way.\n * They can represent determinate or indeterminate progress.\n */\n\n\nexport let ProgressCircle = _react.forwardRef($e712ab91a3ca4a742ab6443c53b96b8$var$ProgressCircle);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css","packages/@react-spectrum/progress/src/ProgressBarBase.tsx","packages/@react-spectrum/progress/src/ProgressBar.tsx","node_modules/@adobe/spectrum-css-temp/components/circleloader/vars.css","packages/@react-spectrum/progress/src/ProgressCircle.tsx"],"names":["a","value","minValue","maxValue","size","showValueLabel","labelPosition","isIndeterminate","ariaLabelledby","otherProps","domRef","useDOMRef","styleProps","useStyleProps","clamp","barStyle","percentage","Math","console","classNames","label","barProps","_ProgressBarBase","React","variant","labelProps","useProgressBar","_ProgressBar","progressBarProps","subMask1Style","subMask2Style","angle","_ProgressCircle"],"mappings":"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","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarProps} from '@react-types/progress';\nimport React, {CSSProperties, HTMLAttributes} from 'react';\nimport {SpectrumProgressBarBaseProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\n\ninterface ProgressBarBaseProps extends SpectrumProgressBarBaseProps, ProgressBarProps {\n  barClassName?: string,\n  barProps?: HTMLAttributes<HTMLDivElement>,\n  labelProps?: HTMLAttributes<HTMLLabelElement>\n}\n\n// Base ProgressBar component shared with Meter.\nfunction ProgressBarBase(props: ProgressBarBaseProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label,\n    barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps,\n    labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n\n  let barStyle: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = `${Math.round(percentage * 100)}%`;\n  }\n\n  // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n  if (!label && !ariaLabel && !ariaLabelledby) {\n    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return (\n    <div\n      {...styleProps}\n      {...barProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-BarLoader',\n          {\n            'spectrum-BarLoader--small': size === 'S',\n            'spectrum-BarLoader--large': size === 'L',\n            'spectrum-BarLoader--indeterminate': isIndeterminate,\n            'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n          },\n          barClassName,\n          styleProps.className\n        )\n      }>\n      {label &&\n        <span\n          {...labelProps}\n          className={classNames(styles, 'spectrum-BarLoader-label')}>\n            {label}\n        </span>\n      }\n      {showValueLabel &&\n        <div className={classNames(styles, 'spectrum-BarLoader-percentage')}>\n          {barProps['aria-valuetext']}\n        </div>\n      }\n      <div className={classNames(styles, 'spectrum-BarLoader-track')}>\n        <div\n          className={classNames(styles, 'spectrum-BarLoader-fill')}\n          style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nlet _ProgressBarBase = React.forwardRef(ProgressBarBase);\nexport {_ProgressBarBase as ProgressBarBase};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarBase} from './ProgressBarBase';\nimport React from 'react';\nimport {SpectrumProgressBarProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\nimport {useProgressBar} from '@react-aria/progress';\n\nfunction ProgressBar(props: SpectrumProgressBarProps, ref: DOMRef<HTMLDivElement>) {\n  let {variant, ...otherProps} = props;\n  const {\n    progressBarProps,\n    labelProps\n  } = useProgressBar(props);\n\n  return (\n    <ProgressBarBase\n      {...otherProps}\n      ref={ref}\n      barProps={progressBarProps}\n      labelProps={labelProps}\n      barClassName={\n        classNames(\n          styles,\n          {\n            'spectrum-BarLoader--overBackground': variant === 'overBackground'\n          }\n        )\n      } />\n  );\n}\n\n/**\n * ProgressBars show the progression of a system operation: downloading, uploading, processing, etc., in a visual way.\n * They can represent either determinate or indeterminate progress.\n */\nlet _ProgressBar = React.forwardRef(ProgressBar);\nexport {_ProgressBar as ProgressBar};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport React, {CSSProperties} from 'react';\nimport {SpectrumProgressCircleProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/circleloader/vars.css';\nimport {useProgressBar} from '@react-aria/progress';\n\nfunction ProgressCircle(props: SpectrumProgressCircleProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'M',\n    variant,\n    isIndeterminate = false,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n  let {progressBarProps} = useProgressBar({...props, value});\n\n  let subMask1Style: CSSProperties = {};\n  let subMask2Style: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue) * 100;\n    let angle;\n    if (percentage > 0 && percentage <= 50) {\n      angle = -180 + (percentage / 50 * 180);\n      subMask1Style.transform = `rotate(${angle}deg)`;\n      subMask2Style.transform = 'rotate(-180deg)';\n    } else if (percentage > 50) {\n      angle = -180 + (percentage - 50) / 50 * 180;\n      subMask1Style.transform = 'rotate(0deg)';\n      subMask2Style.transform = `rotate(${angle}deg)`;\n    }\n  }\n\n  if (!ariaLabel && !ariaLabelledby) {\n    console.warn('ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return (\n    <div\n      {...styleProps}\n      {...progressBarProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-CircleLoader',\n          {\n            'spectrum-CircleLoader--indeterminate': isIndeterminate,\n            'spectrum-CircleLoader--small': size === 'S',\n            'spectrum-CircleLoader--large': size === 'L',\n            'spectrum-CircleLoader--overBackground': variant === 'overBackground'\n          },\n          styleProps.className\n        )\n      }>\n      <div className={classNames(styles, 'spectrum-CircleLoader-track')} />\n      <div className={classNames(styles, 'spectrum-CircleLoader-fills')} >\n        <div className={classNames(styles, 'spectrum-CircleLoader-fillMask1')} >\n          <div\n            className={classNames(styles, 'spectrum-CircleLoader-fillSubMask1')}\n            data-testid=\"fillSubMask1\"\n            style={subMask1Style}>\n            <div className={classNames(styles, 'spectrum-CircleLoader-fill')} />\n          </div>\n        </div>\n        <div className={classNames(styles, 'spectrum-CircleLoader-fillMask2')} >\n          <div\n            className={classNames(styles, 'spectrum-CircleLoader-fillSubMask2')}\n            data-testid=\"fillSubMask2\"\n            style={subMask2Style} >\n            <div className={classNames(styles, 'spectrum-CircleLoader-fill')} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ProgressCircles show the progression of a system operation such as downloading, uploading, processing, etc. in a visual way.\n * They can represent determinate or indeterminate progress.\n */\nlet _ProgressCircle = React.forwardRef(ProgressCircle);\nexport {_ProgressCircle as ProgressCircle};\n"]},"metadata":{},"sourceType":"module"}