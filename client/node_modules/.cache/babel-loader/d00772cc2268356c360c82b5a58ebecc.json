{"ast":null,"code":"import { useControlledState } from \"@react-stately/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { SelectionManager, useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useEffect, useMemo } from \"react\";\nlet $ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator;\n$ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator = Symbol.iterator;\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class ListCollection {\n  constructor(nodes) {\n    var _last;\n\n    this.keyMap = new Map();\n    this.iterable = void 0;\n    this.firstKey = void 0;\n    this.lastKey = void 0;\n    this.iterable = nodes;\n\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last;\n    let index = 0;\n\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node; // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = (_last = last) == null ? void 0 : _last.key;\n  }\n\n  *[$ed5d55e571caf578a4f08babbaa26be$var$_Symbol$iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n}\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\n\nexport function useListState(props) {\n  let {\n    filter\n  } = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes);\n\n  let collection = useCollection(props, factory, null, [filter]); // Reset focused key if that item is deleted from the collection.\n\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\n\nexport function useSingleSelectListState(props) {\n  var _props$defaultSelecte;\n\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, (_props$defaultSelecte = props.defaultSelectedKey) != null ? _props$defaultSelecte : null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {\n    collection,\n    disabledKeys,\n    selectionManager\n  } = useListState(_babelRuntimeHelpersEsmExtends({}, props, {\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    selectedKeys,\n    onSelectionChange: keys => {\n      let key = keys.values().next().value; // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  }));\n  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}","map":{"version":3,"sources":["packages/@react-stately/list/src/ListCollection.ts","packages/@react-stately/list/src/useListState.ts","packages/@react-stately/list/src/useSingleSelectListState.ts"],"names":["keyMap","iterable","firstKey","lastKey","constructor","visit","node","index","last","Symbol","iterator","getKeys","getKeyBefore","getKeyAfter","getFirstKey","getLastKey","getItem","filter","selectionState","useMultipleSelectionState","disabledKeys","useMemo","props","factory","nodes","collection","useCollection","useEffect","selectionManager","useControlledState","selectedKeys","selectedKey","selectionMode","disallowEmptySelection","onSelectionChange","keys","key","setSelectedKey","selectedItem"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelection {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>\n}\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {\n    filter\n  } = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n\n  let collection = useCollection(props, factory, null, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, SingleSelection {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>\n}\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}