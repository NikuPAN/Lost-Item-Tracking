{"ast":null,"code":"import { useFocusable } from \"@react-aria/focus\";\nimport { useEffect, useRef } from \"react\";\nimport { getInteractionModality, isFocusVisible, usePress, useHover } from \"@react-aria/interactions\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport { filterDOMProps, mergeProps, useId } from \"@react-aria/utils\";\n/**\n * Provides the accessibility implementation for a Tooltip component.\n */\n\nexport function useTooltip(props) {\n  let domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  return {\n    tooltipProps: mergeProps(domProps, {\n      role: 'tooltip'\n    })\n  };\n}\n/**\n * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button\n * that shows a description when focused or hovered.\n */\n\nexport function useTooltipTrigger(props, state, ref) {\n  let {\n    isDisabled,\n    trigger\n  } = props;\n  let tooltipId = useId();\n  let isHovered = useRef(false);\n  let isFocused = useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) {\n      state.open(isFocused.current);\n    }\n  };\n\n  let handleHide = () => {\n    if (!isHovered.current && !isFocused.current) {\n      state.close();\n    }\n  };\n\n  useEffect(() => {\n    let onKeyDown = e => {\n      if (ref && ref.current) {\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        if (e.key === 'Escape') {\n          state.close();\n        }\n      }\n    };\n\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') {\n      return;\n    } // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n\n\n    if (getInteractionModality() === 'pointer') {\n      isHovered.current = true;\n    } else {\n      isHovered.current = false;\n    }\n\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') {\n      return;\n    } // no matter how the trigger is left, we should close the tooltip\n\n\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onFocus = () => {\n    let isVisible = isFocusVisible();\n\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let {\n    hoverProps\n  } = useHover({\n    isDisabled,\n    onHoverStart,\n    onHoverEnd\n  });\n  let {\n    pressProps\n  } = usePress({\n    onPressStart\n  });\n  let {\n    focusableProps\n  } = useFocusable({\n    isDisabled,\n    onFocus,\n    onBlur\n  }, ref);\n  return {\n    triggerProps: _babelRuntimeHelpersEsmExtends({\n      'aria-describedby': state.isOpen ? tooltipId : undefined\n    }, mergeProps(focusableProps, hoverProps, pressProps)),\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/tooltip/src/useTooltip.ts","packages/@react-aria/tooltip/src/useTooltipTrigger.ts"],"names":["domProps","filterDOMProps","labelable","tooltipProps","mergeProps","role","trigger","tooltipId","useId","isHovered","useRef","isFocused","handleShow","state","handleHide","useEffect","onKeyDown","e","ref","document","onHoverStart","getInteractionModality","onHoverEnd","onPressStart","onFocus","isVisible","isFocusVisible","onBlur","hoverProps","useHover","pressProps","usePress","focusableProps","useFocusable","triggerProps","undefined","id"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTooltipProps} from '@react-types/tooltip';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\n\ninterface TooltipAria {\n  /**\n   * Props for the tooltip element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a Tooltip component.\n */\nexport function useTooltip(props: AriaTooltipProps): TooltipAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    tooltipProps: mergeProps(domProps, {\n      role: 'tooltip'\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvents} from '@react-types/shared';\nimport {getInteractionModality, HoverProps, isFocusVisible, PressProps, usePress} from '@react-aria/interactions';\nimport {HTMLAttributes, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useFocusable} from '@react-aria/focus';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TooltipTriggerAria {\n  /**\n   * Props for the trigger element.\n   */\n  triggerProps: HTMLAttributes<HTMLElement> & PressProps & HoverProps & FocusEvents,\n\n  /**\n   * Props for the overlay container element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button\n * that shows a description when focused or hovered.\n */\nexport function useTooltipTrigger(props: TooltipTriggerProps, state: TooltipTriggerState, ref: RefObject<HTMLElement>) : TooltipTriggerAria {\n  let {\n    isDisabled,\n    trigger\n  } = props;\n\n  let tooltipId = useId();\n\n  let isHovered = useRef(false);\n  let isFocused = useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) {\n      state.open(isFocused.current);\n    }\n  };\n\n  let handleHide = () => {\n    if (!isHovered.current && !isFocused.current) {\n      state.close();\n    }\n  };\n\n  useEffect(() => {\n    let onKeyDown = (e) => {\n      if (ref && ref.current) {\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        if (e.key === 'Escape') {\n          state.close();\n        }\n      }\n    };\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if (getInteractionModality() === 'pointer') {\n      isHovered.current = true;\n    } else {\n      isHovered.current = false;\n    }\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onFocus = () => {\n    let isVisible = isFocusVisible();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart,\n    onHoverEnd\n  });\n\n  let {pressProps} = usePress({onPressStart});\n\n  let {focusableProps} = useFocusable({\n    isDisabled,\n    onFocus,\n    onBlur\n  }, ref);\n\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...mergeProps(focusableProps, hoverProps, pressProps)\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}