{"ast":null,"code":"import { useTreeState } from \"@react-stately/tree\";\nimport { useSeparator } from \"@react-aria/separator\";\nimport { Text } from \"@react-spectrum/text\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { Grid } from \"@react-spectrum/layout\";\nimport _spectrumIconsUiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useMenuTrigger, useMenuItem, useMenuSection, useMenu } from \"@react-aria/menu\";\nimport { PressResponder, useHover } from \"@react-aria/interactions\";\nimport { Popover, Tray } from \"@react-spectrum/overlays\";\nimport _react, { useContext, forwardRef, Fragment, useRef, useEffect } from \"react\";\nimport { FocusScope, FocusRing } from \"@react-aria/focus\";\nimport { DismissButton, useOverlayPosition } from \"@react-aria/overlays\";\nimport { classNames, unwrapDOMRef, useDOMRef, useIsMobileDevice, useStyleProps, SlotProvider } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport { Item, Section } from \"@react-stately/collections\";\nexport { Item, Section };\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nconst $e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext = _react.createContext({});\n\nfunction $e0344bf6d2697b02b94f0b49777ebba6$export$useMenuContext() {\n  return useContext($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext);\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/menu/vars.css\n\n\nvar $a0405c35323f8fc23474b1d62cf3a$exports = {};\n$a0405c35323f8fc23474b1d62cf3a$exports = {\n  \"spectrum-Menu-popover\": \"_spectrum-Menu-popover_7c360\",\n  \"spectrum-Menu\": \"_spectrum-Menu_7c360\",\n  \"spectrum-Menu-sectionHeading\": \"_spectrum-Menu-sectionHeading_7c360\",\n  \"spectrum-Menu-checkmark\": \"_spectrum-Menu-checkmark_7c360\",\n  \"spectrum-Menu-item\": \"_spectrum-Menu-item_7c360\",\n  \"is-selected\": \"_is-selected_7c360\",\n  \"spectrum-Icon\": \"_spectrum-Icon_7c360\",\n  \"spectrum-Menu-itemLabel\": \"_spectrum-Menu-itemLabel_7c360\",\n  \"spectrum-Menu-itemIcon\": \"_spectrum-Menu-itemIcon_7c360\",\n  \"spectrum-Menu-itemLabel--wrapping\": \"_spectrum-Menu-itemLabel--wrapping_7c360\",\n  \"spectrum-Menu-divider\": \"_spectrum-Menu-divider_7c360\",\n  \"spectrum-Menu-itemGrid\": \"_spectrum-Menu-itemGrid_7c360\",\n  \"is-selectable\": \"_is-selectable_7c360\",\n  \"spectrum-Menu-end\": \"_spectrum-Menu-end_7c360\",\n  \"spectrum-Menu-icon\": \"_spectrum-Menu-icon_7c360\",\n  \"spectrum-Menu-description\": \"_spectrum-Menu-description_7c360\",\n  \"spectrum-Menu-keyboard\": \"_spectrum-Menu-keyboard_7c360\",\n  \"focus-ring\": \"_focus-ring_7c360\",\n  \"is-focused\": \"_is-focused_7c360\",\n  \"is-hovered\": \"_is-hovered_7c360\",\n  \"is-highlighted\": \"_is-highlighted_7c360\",\n  \"is-open\": \"_is-open_7c360\",\n  \"is-active\": \"_is-active_7c360\",\n  \"is-disabled\": \"_is-disabled_7c360\"\n};\nvar $a0405c35323f8fc23474b1d62cf3a$$interop$default = $parcel$interopDefault($a0405c35323f8fc23474b1d62cf3a$exports);\n\nfunction $c43ae1eefde37efa8df9440181b3682e$var$MenuTrigger(props, ref) {\n  let menuPopoverRef = useRef();\n  let triggerRef = useRef();\n  let domRef = useDOMRef(ref);\n  let menuTriggerRef = domRef || triggerRef;\n  let menuRef = useRef();\n  let {\n    children,\n    align = 'start',\n    shouldFlip = true,\n    direction = 'bottom',\n    closeOnSelect = true\n  } = props;\n\n  let [menuTrigger, menu] = _react.Children.toArray(children);\n\n  let state = useMenuTriggerState(props);\n  let {\n    menuTriggerProps,\n    menuProps\n  } = useMenuTrigger({}, state, menuTriggerRef);\n  let isMobile = useIsMobileDevice();\n  let {\n    overlayProps: positionProps,\n    placement\n  } = useOverlayPosition({\n    targetRef: menuTriggerRef,\n    overlayRef: unwrapDOMRef(menuPopoverRef),\n    scrollRef: menuRef,\n    placement: direction + \" \" + align,\n    shouldFlip: shouldFlip,\n    isOpen: state.isOpen && !isMobile,\n    onClose: state.close\n  });\n\n  let menuContext = _babelRuntimeHelpersEsmExtends({}, menuProps, {\n    ref: menuRef,\n    onClose: state.close,\n    closeOnSelect,\n    autoFocus: state.focusStrategy || true,\n    UNSAFE_style: isMobile ? {\n      width: '100%',\n      maxHeight: 'inherit'\n    } : undefined,\n    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, {\n      'spectrum-Menu-popover': !isMobile\n    })\n  });\n\n  let contents = /*#__PURE__*/_react.createElement(FocusScope, {\n    restoreFocus: true\n  }, /*#__PURE__*/_react.createElement(DismissButton, {\n    onDismiss: state.close\n  }), menu, /*#__PURE__*/_react.createElement(DismissButton, {\n    onDismiss: state.close\n  })); // On small screen devices, the menu is rendered in a tray, otherwise a popover.\n\n\n  let overlay;\n\n  if (isMobile) {\n    overlay = /*#__PURE__*/_react.createElement(Tray, {\n      isOpen: state.isOpen,\n      onClose: state.close,\n      shouldCloseOnBlur: true\n    }, contents);\n  } else {\n    overlay = /*#__PURE__*/_react.createElement(Popover, {\n      isOpen: state.isOpen,\n      UNSAFE_style: positionProps.style,\n      ref: menuPopoverRef,\n      placement: placement,\n      hideArrow: true,\n      onClose: state.close,\n      shouldCloseOnBlur: true\n    }, contents);\n  }\n\n  return /*#__PURE__*/_react.createElement(Fragment, null, /*#__PURE__*/_react.createElement(PressResponder, _babelRuntimeHelpersEsmExtends({}, menuTriggerProps, {\n    ref: menuTriggerRef,\n    isPressed: state.isOpen\n  }), menuTrigger), /*#__PURE__*/_react.createElement($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext.Provider, {\n    value: menuContext\n  }, overlay));\n}\n/**\n * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,\n * linking the Menu's open state with the trigger's press state.\n */\n\n\nexport let MenuTrigger = forwardRef($c43ae1eefde37efa8df9440181b3682e$var$MenuTrigger);\n/** @private */\n\nfunction $d728816e2ff4946eb3656e641cbfafdb$export$MenuItem(props) {\n  let {\n    item,\n    state,\n    isVirtualized,\n    onAction\n  } = props;\n  let {\n    onClose,\n    closeOnSelect\n  } = $e0344bf6d2697b02b94f0b49777ebba6$export$useMenuContext();\n  let {\n    rendered,\n    key\n  } = item;\n  let isSelected = state.selectionManager.isSelected(key);\n  let isDisabled = state.disabledKeys.has(key);\n  let ref = useRef();\n  let {\n    menuItemProps,\n    labelProps,\n    descriptionProps,\n    keyboardShortcutProps\n  } = useMenuItem({\n    isSelected,\n    isDisabled,\n    'aria-label': item['aria-label'],\n    key,\n    onClose,\n    closeOnSelect,\n    isVirtualized,\n    onAction\n  }, state, ref);\n  let {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled\n  });\n  let contents = typeof rendered === 'string' ? /*#__PURE__*/_react.createElement(Text, null, rendered) : rendered;\n  return /*#__PURE__*/_react.createElement(FocusRing, {\n    focusRingClass: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'focus-ring')\n  }, /*#__PURE__*/_react.createElement(\"li\", _babelRuntimeHelpersEsmExtends({}, mergeProps(menuItemProps, hoverProps), {\n    ref: ref,\n    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-item', {\n      'is-disabled': isDisabled,\n      'is-selected': isSelected,\n      'is-selectable': state.selectionManager.selectionMode !== 'none',\n      'is-hovered': isHovered\n    })\n  }), /*#__PURE__*/_react.createElement(Grid, {\n    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-itemGrid')\n  }, /*#__PURE__*/_react.createElement(SlotProvider, {\n    slots: {\n      text: _babelRuntimeHelpersEsmExtends({\n        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-itemLabel']\n      }, labelProps),\n      end: _babelRuntimeHelpersEsmExtends({\n        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-end']\n      }, descriptionProps),\n      icon: {\n        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-icon']\n      },\n      description: _babelRuntimeHelpersEsmExtends({\n        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-description']\n      }, descriptionProps),\n      keyboard: _babelRuntimeHelpersEsmExtends({\n        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-keyboard']\n      }, keyboardShortcutProps)\n    }\n  }, contents, isSelected && /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, {\n    slot: \"checkmark\",\n    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-checkmark')\n  })))));\n}\n/** @private */\n\n\nfunction $c8d8516d196f0e0f219f9d2aa36a7bbb$export$MenuSection(props) {\n  let {\n    item,\n    state,\n    onAction\n  } = props;\n  let {\n    itemProps,\n    headingProps,\n    groupProps\n  } = useMenuSection({\n    heading: item.rendered,\n    'aria-label': item['aria-label']\n  });\n  let {\n    separatorProps\n  } = useSeparator({\n    elementType: 'li'\n  });\n  return /*#__PURE__*/_react.createElement(Fragment, null, item.key !== state.collection.getFirstKey() && /*#__PURE__*/_react.createElement(\"li\", _babelRuntimeHelpersEsmExtends({}, separatorProps, {\n    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-divider')\n  })), /*#__PURE__*/_react.createElement(\"li\", itemProps, item.rendered && /*#__PURE__*/_react.createElement(\"span\", _babelRuntimeHelpersEsmExtends({}, headingProps, {\n    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-sectionHeading')\n  }), item.rendered), /*#__PURE__*/_react.createElement(\"ul\", _babelRuntimeHelpersEsmExtends({}, groupProps, {\n    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu')\n  }), [...item.childNodes].map(node => {\n    let item = /*#__PURE__*/_react.createElement($d728816e2ff4946eb3656e641cbfafdb$export$MenuItem, {\n      key: node.key,\n      item: node,\n      state: state,\n      onAction: onAction\n    });\n\n    if (node.wrapper) {\n      item = node.wrapper(item);\n    }\n\n    return item;\n  }))));\n}\n\nfunction $b8289691bd5f1d9f865a222ff9ba3a$var$Menu(props, ref) {\n  let contextProps = useContext($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext);\n\n  let completeProps = _babelRuntimeHelpersEsmExtends({}, mergeProps(contextProps, props));\n\n  let domRef = useDOMRef(ref);\n  let state = useTreeState(completeProps);\n  let {\n    menuProps\n  } = useMenu(completeProps, state, domRef);\n  let {\n    styleProps\n  } = useStyleProps(completeProps); // Sync ref from <MenuTrigger> context with DOM ref.\n\n  useEffect(() => {\n    if (contextProps && contextProps.ref) {\n      contextProps.ref.current = domRef.current;\n      return () => {\n        contextProps.ref.current = null;\n      };\n    }\n  }, [contextProps, domRef]);\n  return /*#__PURE__*/_react.createElement(\"ul\", _babelRuntimeHelpersEsmExtends({}, menuProps, styleProps, {\n    ref: domRef,\n    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu', styleProps.className)\n  }), [...state.collection].map(item => {\n    if (item.type === 'section') {\n      return /*#__PURE__*/_react.createElement($c8d8516d196f0e0f219f9d2aa36a7bbb$export$MenuSection, {\n        key: item.key,\n        item: item,\n        state: state,\n        onAction: completeProps.onAction\n      });\n    }\n\n    let menuItem = /*#__PURE__*/_react.createElement($d728816e2ff4946eb3656e641cbfafdb$export$MenuItem, {\n      key: item.key,\n      item: item,\n      state: state,\n      onAction: completeProps.onAction\n    });\n\n    if (item.wrapper) {\n      menuItem = item.wrapper(menuItem);\n    }\n\n    return menuItem;\n  }));\n}\n/**\n * Menus display a list of actions or options that a user can choose.\n */\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\n\n\nexport const Menu = _react.forwardRef($b8289691bd5f1d9f865a222ff9ba3a$var$Menu);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","packages/@react-spectrum/menu/src/context.ts","node_modules/@adobe/spectrum-css-temp/components/menu/vars.css","packages/@react-spectrum/menu/src/MenuTrigger.tsx","packages/@react-spectrum/menu/src/MenuItem.tsx","packages/@react-spectrum/menu/src/MenuSection.tsx","packages/@react-spectrum/menu/src/Menu.tsx"],"names":["a","MenuContext","React","useContext","menuPopoverRef","useRef","triggerRef","domRef","useDOMRef","menuTriggerRef","menuRef","align","shouldFlip","direction","closeOnSelect","state","useMenuTriggerState","menuProps","useMenuTrigger","isMobile","useIsMobileDevice","overlayProps","placement","useOverlayPosition","targetRef","overlayRef","unwrapDOMRef","scrollRef","isOpen","onClose","close","menuContext","ref","autoFocus","UNSAFE_style","width","maxHeight","UNSAFE_className","classNames","contents","overlay","positionProps","_MenuTrigger","forwardRef","onAction","key","isSelected","isDisabled","keyboardShortcutProps","useMenuItem","item","isHovered","useHover","mergeProps","text","end","icon","description","keyboard","groupProps","useMenuSection","heading","separatorProps","useSeparator","elementType","node","contextProps","completeProps","useTreeState","useMenu","styleProps","useStyleProps","useEffect","menuItem","_Menu"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD;;ACqBM,MAAMC,oDAAW,GAAGC,MAAK,CAALA,aAAAA,CAApB,EAAoBA,CAApB;;AAEA,SAAA,uDAAA,GAA4C;AACjD,SAAOC,UAAU,CAAjB,oDAAiB,CAAjB;AACD,C;;;;AC3BD,sCAAA,GAAiB;AACf,2BADe,8BAAA;AAEf,mBAFe,sBAAA;AAGf,kCAHe,qCAAA;AAIf,6BAJe,gCAAA;AAKf,wBALe,2BAAA;AAMf,iBANe,oBAAA;AAOf,mBAPe,sBAAA;AAQf,6BARe,gCAAA;AASf,4BATe,+BAAA;AAUf,uCAVe,0CAAA;AAWf,2BAXe,8BAAA;AAYf,4BAZe,+BAAA;AAaf,mBAbe,sBAAA;AAcf,uBAde,0BAAA;AAef,wBAfe,2BAAA;AAgBf,+BAhBe,kCAAA;AAiBf,4BAjBe,+BAAA;AAkBf,gBAlBe,mBAAA;AAmBf,gBAnBe,mBAAA;AAoBf,gBApBe,mBAAA;AAqBf,oBArBe,uBAAA;AAsBf,aAtBe,gBAAA;AAuBf,eAvBe,kBAAA;AAwBf,iBAAe;AAxBA,CAAjB;;;AC0BA,SAAA,iDAAA,CAAA,KAAA,EAAA,GAAA,EAAgF;AAC9E,MAAIC,cAAc,GAAGC,MAArB,EAAA;AACA,MAAIC,UAAU,GAAGD,MAAjB,EAAA;AACA,MAAIE,MAAM,GAAGC,SAAS,CAAtB,GAAsB,CAAtB;AACA,MAAIC,cAAc,GAAGF,MAAM,IAA3B,UAAA;AACA,MAAIG,OAAO,GAAGL,MAAd,EAAA;AACA,MAAI;AAAA,IAAA,QAAA;AAEFM,IAAAA,KAAK,GAFH,OAAA;AAGFC,IAAAA,UAAU,GAHR,IAAA;AAIFC,IAAAA,SAAS,GAJP,QAAA;AAKFC,IAAAA,aAAa,GAAG;AALd,MAAJ,KAAA;;AAQA,MAAI,CAAA,WAAA,EAAA,IAAA,IAAsBZ,MAAK,CAALA,QAAAA,CAAAA,OAAAA,CAA1B,QAA0BA,CAA1B;;AACA,MAAIa,KAAK,GAAGC,mBAAmB,CAA/B,KAA+B,CAA/B;AAEA,MAAI;AAAA,IAAA,gBAAA;AAAmBC,IAAAA;AAAnB,MAAgCC,cAAc,CAAA,EAAA,EAAA,KAAA,EAAlD,cAAkD,CAAlD;AAEA,MAAIC,QAAQ,GAAGC,iBAAf,EAAA;AACA,MAAI;AAACC,IAAAA,YAAY,EAAb,aAAA;AAA8BC,IAAAA;AAA9B,MAA2CC,kBAAkB,CAAC;AAChEC,IAAAA,SAAS,EADuD,cAAA;AAEhEC,IAAAA,UAAU,EAAEC,YAAY,CAFwC,cAExC,CAFwC;AAGhEC,IAAAA,SAAS,EAHuD,OAAA;AAIhEL,IAAAA,SAAS,EAAKT,SAAL,GAAA,GAAKA,GAJkD,KAAA;AAKhED,IAAAA,UAAU,EALsD,UAAA;AAMhEgB,IAAAA,MAAM,EAAEb,KAAK,CAALA,MAAAA,IAAgB,CANwC,QAAA;AAOhEc,IAAAA,OAAO,EAAEd,KAAK,CAACe;AAPiD,GAAD,CAAjE;;AAUA,MAAIC,WAAW,GAAA,8BAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEbC,IAAAA,GAAG,EAFU,OAAA;AAGbH,IAAAA,OAAO,EAAEd,KAAK,CAHD,KAAA;AAAA,IAAA,aAAA;AAKbkB,IAAAA,SAAS,EAAElB,KAAK,CAALA,aAAAA,IALE,IAAA;AAMbmB,IAAAA,YAAY,EAAEf,QAAQ,GAAG;AACvBgB,MAAAA,KAAK,EADkB,MAAA;AAEvBC,MAAAA,SAAS,EAAE;AAFY,KAAH,GANT,SAAA;AAUbC,IAAAA,gBAAgB,EAAEC,UAAU,CAAA,+CAAA,EAAS;AAAC,+BAAyB,CAACnB;AAA3B,KAAT;AAVf,GAAA,CAAf;;AAaA,MAAIoB,QAAQ,GAAA,aACV,MAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,YAAY,EAAA;AAAxB,GAAA,EAAA,aACE,MAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,SAAS,EAAExB,KAAK,CAACe;AAAhC,GAAA,CADF,EAAA,IAAA,EAAA,aAGE,MAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,SAAS,EAAEf,KAAK,CAACe;AAAhC,GAAA,CAHF,CADF,CA3C8E,CAmD9E;;;AACA,MAAA,OAAA;;AACA,MAAA,QAAA,EAAc;AACZU,IAAAA,OAAO,GAAA,aACL,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,MAAM,EAAEzB,KAAK,CAAnB,MAAA;AAA4B,MAAA,OAAO,EAAEA,KAAK,CAA1C,KAAA;AAAkD,MAAA,iBAAiB,EAAA;AAAnE,KAAA,EADFyB,QACE,CADFA;AADF,GAAA,MAMO;AACLA,IAAAA,OAAO,GAAA,aACL,MAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,MAAA,MAAM,EAAEzB,KAAK,CADf,MAAA;AAEE,MAAA,YAAY,EAAE0B,aAAa,CAF7B,KAAA;AAGE,MAAA,GAAG,EAHL,cAAA;AAIE,MAAA,SAAS,EAJX,SAAA;AAKE,MAAA,SAAS,EALX,IAAA;AAME,MAAA,OAAO,EAAE1B,KAAK,CANhB,KAAA;AAOE,MAAA,iBAAiB,EAAA;AAPnB,KAAA,EADFyB,QACE,CADFA;AAYD;;AAED,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAA,aACE,MAAA,CAAA,aAAA,CAAA,cAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,gBAAA,EAAA;AAAsC,IAAA,GAAG,EAAzC,cAAA;AAA2D,IAAA,SAAS,EAAEzB,KAAK,CAACa;AAA5E,GAAA,CAAA,EADF,WACE,CADF,EAAA,aAIE,MAAA,CAAA,aAAA,CAAA,oDAAA,CAAA,QAAA,EAAA;AAAsB,IAAA,KAAK,EAAEG;AAA7B,GAAA,EALJ,OAKI,CAJF,CADF;AAUD;AAED;;;;;;OAIA,IAAIW,WAAY,GAAGC,UAAU,CAA7B,iDAA6B,CAA7B;ACnFA;;AACO,SAAA,iDAAA,CAAA,KAAA,EAA8C;AACnD,MAAI;AAAA,IAAA,IAAA;AAAA,IAAA,KAAA;AAAA,IAAA,aAAA;AAIFC,IAAAA;AAJE,MAAJ,KAAA;AAOA,MAAI;AAAA,IAAA,OAAA;AAEF9B,IAAAA;AAFE,MAGA,uDAHJ,EAAA;AAKA,MAAI;AAAA,IAAA,QAAA;AAEF+B,IAAAA;AAFE,MAAJ,IAAA;AAKA,MAAIC,UAAU,GAAG/B,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,CAAjB,GAAiBA,CAAjB;AACA,MAAIgC,UAAU,GAAGhC,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAjB,GAAiBA,CAAjB;AAEA,MAAIiB,GAAG,GAAG3B,MAAV,EAAA;AACA,MAAI;AAAA,IAAA,aAAA;AAAA,IAAA,UAAA;AAAA,IAAA,gBAAA;AAA8C2C,IAAAA;AAA9C,MAAuEC,WAAW,CACpF;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAGE,kBAAcC,IAAI,CAHpB,YAGoB,CAHpB;AAAA,IAAA,GAAA;AAAA,IAAA,OAAA;AAAA,IAAA,aAAA;AAAA,IAAA,aAAA;AAQEN,IAAAA;AARF,GADoF,EAAA,KAAA,EAAtF,GAAsF,CAAtF;AAcA,MAAI;AAAA,IAAA,UAAA;AAAaO,IAAAA;AAAb,MAA0BC,QAAQ,CAAC;AAACL,IAAAA;AAAD,GAAD,CAAtC;AAEA,MAAIR,QAAQ,GAAG,OAAA,QAAA,KAAA,QAAA,GAAA,aACX,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EADW,QACX,CADW,GAAf,QAAA;AAIA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,cAAc,EAAED,UAAU,CAAA,+CAAA,EAAA,YAAA;AAArC,GAAA,EAAA,aACE,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,8BAAA,CAAA,EAAA,EACMe,UAAU,CAAA,aAAA,EADhB,UACgB,CADhB,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,SAAS,EAAEf,UAAU,CAAA,+CAAA,EAAA,oBAAA,EAGnB;AACE,qBADF,UAAA;AAEE,qBAFF,UAAA;AAGE,uBAAiBvB,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,KAHnB,MAAA;AAIE,oBAAcoC;AAJhB,KAHmB;AAHvB,GAAA,CAAA,EAAA,aAaE,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,gBAAgB,EACdb,UAAU,CAAA,+CAAA,EAAA,wBAAA;AAFd,GAAA,EAAA,aAOE,MAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLgB,MAAAA,IAAI,EAAA,8BAAA,CAAA;AAAGjB,QAAAA,gBAAgB,EAAE,+CAAA,CAAA,yBAAA;AAArB,OAAA,EADC,UACD,CADC;AAELkB,MAAAA,GAAG,EAAA,8BAAA,CAAA;AAAGlB,QAAAA,gBAAgB,EAAE,+CAAA,CAAA,mBAAA;AAArB,OAAA,EAFE,gBAEF,CAFE;AAGLmB,MAAAA,IAAI,EAAE;AAACnB,QAAAA,gBAAgB,EAAE,+CAAA,CAAA,oBAAA;AAAnB,OAHD;AAILoB,MAAAA,WAAW,EAAA,8BAAA,CAAA;AAAGpB,QAAAA,gBAAgB,EAAE,+CAAA,CAAA,2BAAA;AAArB,OAAA,EAJN,gBAIM,CAJN;AAKLqB,MAAAA,QAAQ,EAAA,8BAAA,CAAA;AAAGrB,QAAAA,gBAAgB,EAAE,+CAAA,CAAA,wBAAA;AAArB,OAAA,EAAA,qBAAA;AALH;AADT,GAAA,EAAA,QAAA,EASGS,UAAU,IAAA,aACT,MAAA,CAAA,aAAA,CAAA,+BAAA,EAAA;AACE,IAAA,IAAI,EADN,WAAA;AAEE,IAAA,gBAAgB,EACVR,UAAU,CAAA,+CAAA,EAAA,yBAAA;AAHlB,GAAA,CAVJ,CAPF,CAbF,CADF,CADF;AA8CD;AC/FD;;;AACO,SAAA,oDAAA,CAAA,KAAA,EAAoD;AACzD,MAAI;AAAA,IAAA,IAAA;AAAA,IAAA,KAAA;AAAcM,IAAAA;AAAd,MAAJ,KAAA;AACA,MAAI;AAAA,IAAA,SAAA;AAAA,IAAA,YAAA;AAA0Be,IAAAA;AAA1B,MAAwCC,cAAc,CAAC;AACzDC,IAAAA,OAAO,EAAEX,IAAI,CAD4C,QAAA;AAEzD,kBAAcA,IAAI,CAAA,YAAA;AAFuC,GAAD,CAA1D;AAKA,MAAI;AAACY,IAAAA;AAAD,MAAmBC,YAAY,CAAC;AAClCC,IAAAA,WAAW,EAAE;AADqB,GAAD,CAAnC;AAIA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EACGd,IAAI,CAAJA,GAAAA,KAAanC,KAAK,CAALA,UAAAA,CAAbmC,WAAanC,EAAbmC,IAAAA,aACC,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,cAAA,EAAA;AAEE,IAAA,SAAS,EAAEZ,UAAU,CAAA,+CAAA,EAAA,uBAAA;AAFvB,GAAA,CAAA,CAFJ,EAAA,aASE,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,SAAA,EACGY,IAAI,CAAJA,QAAAA,IAAAA,aACC,MAAA,CAAA,aAAA,CAAA,MAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAEE,IAAA,SAAS,EACPZ,UAAU,CAAA,+CAAA,EAAA,8BAAA;AAHd,GAAA,CAAA,EAQGY,IAAI,CAVX,QAEI,CAFJ,EAAA,aAaE,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,SAAS,EACPZ,UAAU,CAAA,+CAAA,EAAA,eAAA;AAHd,GAAA,CAAA,EAQG,CAAC,GAAGY,IAAI,CAAR,UAAA,EAAA,GAAA,CAAyBe,IAAI,IAAI;AAChC,QAAIf,IAAI,GAAA,aACN,MAAA,CAAA,aAAA,CAAA,iDAAA,EAAA;AACE,MAAA,GAAG,EAAEe,IAAI,CADX,GAAA;AAEE,MAAA,IAAI,EAFN,IAAA;AAGE,MAAA,KAAK,EAHP,KAAA;AAIE,MAAA,QAAQ,EAAErB;AAJZ,KAAA,CADF;;AAQA,QAAIqB,IAAI,CAAR,OAAA,EAAkB;AAChBf,MAAAA,IAAI,GAAGe,IAAI,CAAJA,OAAAA,CAAPf,IAAOe,CAAPf;AACD;;AAED,WAAA,IAAA;AA5CV,GA+BS,CARH,CAbF,CATF,CADF;AAkDD;;ACjED,SAAA,wCAAA,CAAA,KAAA,EAAA,GAAA,EAA4F;AAC1F,MAAIgB,YAAY,GAAG/D,UAAU,CAA7B,oDAA6B,CAA7B;;AACA,MAAIgE,aAAa,GAAA,8BAAA,CAAA,EAAA,EACZd,UAAU,CAAA,YAAA,EADf,KACe,CADE,CAAjB;;AAIA,MAAI9C,MAAM,GAAGC,SAAS,CAAtB,GAAsB,CAAtB;AACA,MAAIO,KAAK,GAAGqD,YAAY,CAAxB,aAAwB,CAAxB;AACA,MAAI;AAACnD,IAAAA;AAAD,MAAcoD,OAAO,CAAA,aAAA,EAAA,KAAA,EAAzB,MAAyB,CAAzB;AACA,MAAI;AAACC,IAAAA;AAAD,MAAeC,aAAa,CAT0D,aAS1D,CAAhC,CAT0F,CAW1F;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIN,YAAY,IAAIA,YAAY,CAAhC,GAAA,EAAsC;AACpCA,MAAAA,YAAY,CAAZA,GAAAA,CAAAA,OAAAA,GAA2B3D,MAAM,CAAjC2D,OAAAA;AACA,aAAO,MAAM;AACXA,QAAAA,YAAY,CAAZA,GAAAA,CAAAA,OAAAA,GAAAA,IAAAA;AADF,OAAA;AAGD;AANM,GAAA,EAON,CAAA,YAAA,EAPHM,MAOG,CAPM,CAATA;AASA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,IAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,SAAA,EAAA,UAAA,EAAA;AAGE,IAAA,GAAG,EAHL,MAAA;AAIE,IAAA,SAAS,EACPlC,UAAU,CAAA,+CAAA,EAAA,eAAA,EAGRgC,UAAU,CAHF,SAAA;AALd,GAAA,CAAA,EAWG,CAAC,GAAGvD,KAAK,CAAT,UAAA,EAAA,GAAA,CAA0BmC,IAAI,IAAI;AACjC,QAAIA,IAAI,CAAJA,IAAAA,KAAJ,SAAA,EAA6B;AAC3B,aAAA,aACE,MAAA,CAAA,aAAA,CAAA,oDAAA,EAAA;AACE,QAAA,GAAG,EAAEA,IAAI,CADX,GAAA;AAEE,QAAA,IAAI,EAFN,IAAA;AAGE,QAAA,KAAK,EAHP,KAAA;AAIE,QAAA,QAAQ,EAAEiB,aAAa,CAACvB;AAJ1B,OAAA,CADF;AAOD;;AAED,QAAI6B,QAAQ,GAAA,aACV,MAAA,CAAA,aAAA,CAAA,iDAAA,EAAA;AACE,MAAA,GAAG,EAAEvB,IAAI,CADX,GAAA;AAEE,MAAA,IAAI,EAFN,IAAA;AAGE,MAAA,KAAK,EAHP,KAAA;AAIE,MAAA,QAAQ,EAAEiB,aAAa,CAACvB;AAJ1B,KAAA,CADF;;AAQA,QAAIM,IAAI,CAAR,OAAA,EAAkB;AAChBuB,MAAAA,QAAQ,GAAGvB,IAAI,CAAJA,OAAAA,CAAXuB,QAAWvB,CAAXuB;AACD;;AAED,WAAA,QAAA;AAnCN,GAYK,CAXH,CADF;AAuCD;AAED;;;AAGA;AACA;;;OACA,MAAMC,IAAK,GAAGxE,MAAK,CAALA,UAAAA,CAAd,wCAAcA,CAAd","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy} from '@react-types/shared';\nimport React, {HTMLAttributes, MutableRefObject, useContext} from 'react';\n\nexport interface MenuContextValue extends HTMLAttributes<HTMLElement> {\n  onClose?: () => void,\n  closeOnSelect?: boolean,\n  shouldFocusWrap?: boolean,\n  autoFocus?: boolean | FocusStrategy,\n  ref?: MutableRefObject<HTMLUListElement>\n}\n\nexport const MenuContext = React.createContext<MenuContextValue>({});\n\nexport function useMenuContext(): MenuContextValue {\n  return useContext(MenuContext);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, unwrapDOMRef, useDOMRef, useIsMobileDevice} from '@react-spectrum/utils';\nimport {DismissButton, useOverlayPosition} from '@react-aria/overlays';\nimport {DOMRef, DOMRefValue} from '@react-types/shared';\nimport {FocusScope} from '@react-aria/focus';\nimport {MenuContext} from './context';\nimport {Placement} from '@react-types/overlays';\nimport {Popover, Tray} from '@react-spectrum/overlays';\nimport {PressResponder} from '@react-aria/interactions';\nimport React, {forwardRef, Fragment, useRef} from 'react';\nimport {SpectrumMenuTriggerProps} from '@react-types/menu';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {useMenuTrigger} from '@react-aria/menu';\nimport {useMenuTriggerState} from '@react-stately/menu';\n\nfunction MenuTrigger(props: SpectrumMenuTriggerProps, ref: DOMRef<HTMLElement>) {\n  let menuPopoverRef = useRef<DOMRefValue<HTMLDivElement>>();\n  let triggerRef = useRef<HTMLElement>();\n  let domRef = useDOMRef(ref);\n  let menuTriggerRef = domRef || triggerRef;\n  let menuRef = useRef<HTMLUListElement>();\n  let {\n    children,\n    align = 'start',\n    shouldFlip = true,\n    direction = 'bottom',\n    closeOnSelect = true\n  } = props;\n\n  let [menuTrigger, menu] = React.Children.toArray(children);\n  let state = useMenuTriggerState(props);\n\n  let {menuTriggerProps, menuProps} = useMenuTrigger({}, state, menuTriggerRef);\n\n  let isMobile = useIsMobileDevice();\n  let {overlayProps: positionProps, placement} = useOverlayPosition({\n    targetRef: menuTriggerRef,\n    overlayRef: unwrapDOMRef(menuPopoverRef),\n    scrollRef: menuRef,\n    placement: `${direction} ${align}` as Placement,\n    shouldFlip: shouldFlip,\n    isOpen: state.isOpen && !isMobile,\n    onClose: state.close\n  });\n\n  let menuContext = {\n    ...menuProps,\n    ref: menuRef,\n    onClose: state.close,\n    closeOnSelect,\n    autoFocus: state.focusStrategy || true,\n    UNSAFE_style: isMobile ? {\n      width: '100%',\n      maxHeight: 'inherit'\n    } : undefined,\n    UNSAFE_className: classNames(styles, {'spectrum-Menu-popover': !isMobile})\n  };\n\n  let contents = (\n    <FocusScope restoreFocus>\n      <DismissButton onDismiss={state.close} />\n      {menu}\n      <DismissButton onDismiss={state.close} />\n    </FocusScope>\n  );\n\n  // On small screen devices, the menu is rendered in a tray, otherwise a popover.\n  let overlay;\n  if (isMobile) {\n    overlay = (\n      <Tray isOpen={state.isOpen} onClose={state.close} shouldCloseOnBlur>\n        {contents}\n      </Tray>\n    );\n  } else {\n    overlay = (\n      <Popover\n        isOpen={state.isOpen}\n        UNSAFE_style={positionProps.style}\n        ref={menuPopoverRef}\n        placement={placement}\n        hideArrow\n        onClose={state.close}\n        shouldCloseOnBlur>\n        {contents}\n      </Popover>\n    );\n  }\n\n  return (\n    <Fragment>\n      <PressResponder {...menuTriggerProps} ref={menuTriggerRef} isPressed={state.isOpen}>\n        {menuTrigger}\n      </PressResponder>\n      <MenuContext.Provider value={menuContext}>\n        {overlay}\n      </MenuContext.Provider>\n    </Fragment>\n  );\n}\n\n/**\n * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,\n * linking the Menu's open state with the trigger's press state.\n */\nlet _MenuTrigger = forwardRef(MenuTrigger);\nexport {_MenuTrigger as MenuTrigger};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, SlotProvider} from '@react-spectrum/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport {mergeProps} from '@react-aria/utils';\nimport {Node} from '@react-types/shared';\nimport React, {Key, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {TreeState} from '@react-stately/tree';\nimport {useHover} from '@react-aria/interactions';\nimport {useMenuContext} from './context';\nimport {useMenuItem} from '@react-aria/menu';\n\ninterface MenuItemProps<T> {\n  item: Node<T>,\n  state: TreeState<T>,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void\n}\n\n/** @private */\nexport function MenuItem<T>(props: MenuItemProps<T>) {\n  let {\n    item,\n    state,\n    isVirtualized,\n    onAction\n  } = props;\n\n  let {\n    onClose,\n    closeOnSelect\n  } = useMenuContext();\n\n  let {\n    rendered,\n    key\n  } = item;\n\n  let isSelected = state.selectionManager.isSelected(key);\n  let isDisabled = state.disabledKeys.has(key);\n\n  let ref = useRef<HTMLLIElement>();\n  let {menuItemProps, labelProps, descriptionProps, keyboardShortcutProps} = useMenuItem(\n    {\n      isSelected,\n      isDisabled,\n      'aria-label': item['aria-label'],\n      key,\n      onClose,\n      closeOnSelect,\n      isVirtualized,\n      onAction\n    },\n    state,\n    ref\n  );\n  let {hoverProps, isHovered} = useHover({isDisabled});\n\n  let contents = typeof rendered === 'string'\n    ? <Text>{rendered}</Text>\n    : rendered;\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <li\n        {...mergeProps(menuItemProps, hoverProps)}\n        ref={ref}\n        className={classNames(\n          styles,\n          'spectrum-Menu-item',\n          {\n            'is-disabled': isDisabled,\n            'is-selected': isSelected,\n            'is-selectable': state.selectionManager.selectionMode !== 'none',\n            'is-hovered': isHovered\n          }\n        )}>\n        <Grid\n          UNSAFE_className={\n            classNames(\n              styles,\n              'spectrum-Menu-itemGrid'\n            )\n          }>\n          <SlotProvider\n            slots={{\n              text: {UNSAFE_className: styles['spectrum-Menu-itemLabel'], ...labelProps},\n              end: {UNSAFE_className: styles['spectrum-Menu-end'], ...descriptionProps},\n              icon: {UNSAFE_className: styles['spectrum-Menu-icon']},\n              description: {UNSAFE_className: styles['spectrum-Menu-description'], ...descriptionProps},\n              keyboard: {UNSAFE_className: styles['spectrum-Menu-keyboard'], ...keyboardShortcutProps}\n            }}>\n            {contents}\n            {isSelected &&\n              <CheckmarkMedium\n                slot=\"checkmark\"\n                UNSAFE_className={\n                      classNames(\n                        styles,\n                        'spectrum-Menu-checkmark'\n                      )\n                    } />\n                }\n          </SlotProvider>\n        </Grid>\n      </li>\n    </FocusRing>\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {MenuItem} from './MenuItem';\nimport {Node} from '@react-types/shared';\nimport React, {Fragment, Key} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {TreeState} from '@react-stately/tree';\nimport {useMenuSection} from '@react-aria/menu';\nimport {useSeparator} from '@react-aria/separator';\n\ninterface MenuSectionProps<T> {\n  item: Node<T>,\n  state: TreeState<T>,\n  onAction?: (key: Key) => void\n}\n\n/** @private */\nexport function MenuSection<T>(props: MenuSectionProps<T>) {\n  let {item, state, onAction} = props;\n  let {itemProps, headingProps, groupProps} = useMenuSection({\n    heading: item.rendered,\n    'aria-label': item['aria-label']\n  });\n\n  let {separatorProps} = useSeparator({\n    elementType: 'li'\n  });\n\n  return (\n    <Fragment>\n      {item.key !== state.collection.getFirstKey() &&\n        <li\n          {...separatorProps}\n          className={classNames(\n            styles,\n            'spectrum-Menu-divider'\n          )} />\n      }\n      <li {...itemProps}>\n        {item.rendered &&\n          <span\n            {...headingProps}\n            className={\n              classNames(\n                styles,\n                'spectrum-Menu-sectionHeading'\n              )\n            }>\n            {item.rendered}\n          </span>\n        }\n        <ul\n          {...groupProps}\n          className={\n            classNames(\n              styles,\n              'spectrum-Menu'\n            )\n          }>\n          {[...item.childNodes].map(node => {\n            let item = (\n              <MenuItem\n                key={node.key}\n                item={node}\n                state={state}\n                onAction={onAction} />\n            );\n\n            if (node.wrapper) {\n              item = node.wrapper(item);\n            }\n\n            return item;\n          })}\n        </ul>\n      </li>\n    </Fragment>\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {MenuContext} from './context';\nimport {MenuItem} from './MenuItem';\nimport {MenuSection} from './MenuSection';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement, useContext, useEffect} from 'react';\nimport {SpectrumMenuProps} from '@react-types/menu';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {useMenu} from '@react-aria/menu';\nimport {useTreeState} from '@react-stately/tree';\n\nfunction Menu<T extends object>(props: SpectrumMenuProps<T>, ref: DOMRef<HTMLUListElement>) {\n  let contextProps = useContext(MenuContext);\n  let completeProps = {\n    ...mergeProps(contextProps, props)\n  };\n\n  let domRef = useDOMRef(ref);\n  let state = useTreeState(completeProps);\n  let {menuProps} = useMenu(completeProps, state, domRef);\n  let {styleProps} = useStyleProps(completeProps);\n\n  // Sync ref from <MenuTrigger> context with DOM ref.\n  useEffect(() => {\n    if (contextProps && contextProps.ref) {\n      contextProps.ref.current = domRef.current;\n      return () => {\n        contextProps.ref.current = null;\n      };\n    }\n  }, [contextProps, domRef]);\n\n  return (\n    <ul\n      {...menuProps}\n      {...styleProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-Menu',\n          styleProps.className\n        )\n      }>\n      {[...state.collection].map(item => {\n        if (item.type === 'section') {\n          return (\n            <MenuSection\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={completeProps.onAction} />\n          );\n        }\n\n        let menuItem = (\n          <MenuItem\n            key={item.key}\n            item={item}\n            state={state}\n            onAction={completeProps.onAction} />\n        );\n\n        if (item.wrapper) {\n          menuItem = item.wrapper(menuItem);\n        }\n\n        return menuItem;\n      })}\n    </ul>\n  );\n}\n\n/**\n * Menus display a list of actions or options that a user can choose.\n */\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\nconst _Menu = React.forwardRef(Menu) as <T>(props: SpectrumMenuProps<T> & {ref?: DOMRef<HTMLUListElement>}) => ReactElement;\nexport {_Menu as Menu};\n"]},"metadata":{},"sourceType":"module"}