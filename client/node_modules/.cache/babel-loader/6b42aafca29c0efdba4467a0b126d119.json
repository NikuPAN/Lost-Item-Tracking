{"ast":null,"code":"import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo, useRef, useState } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\n\nclass $c91e86e24f2dc9a2182dcc2674c58c$export$Selection extends Set {\n  constructor(keys, anchorKey, currentKey) {\n    super(keys);\n    this.anchorKey = void 0;\n    this.currentKey = void 0;\n\n    if (keys instanceof $c91e86e24f2dc9a2182dcc2674c58c$export$Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n\n}\n/**\n * Manages state for multiple selection and focus in a collection.\n */\n\n\nexport function useMultipleSelectionState(props) {\n  let {\n    selectionMode = 'none',\n    disallowEmptySelection\n  } = props; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => $c86d35e876e048ac11515eee40c7$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => $c86d35e876e048ac11515eee40c7$var$convertSelection(props.defaultSelectedKeys, new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  return {\n    selectionMode,\n    disallowEmptySelection,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    setFocusedKey(k) {\n      focusedKeyRef.current = k;\n      setFocusedKey(k);\n    },\n\n    selectedKeys,\n    setSelectedKeys,\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction $c86d35e876e048ac11515eee40c7$var$convertSelection(selection, defaultValue) {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all' ? 'all' : new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(selection);\n}\n/**\n * An interface for reading and updating multiple selection state.\n */\n\n\nexport class SelectionManager {\n  constructor(collection, state, options) {\n    var _options$allowsCellSe;\n\n    this.collection = void 0;\n    this.state = void 0;\n    this.allowsCellSelection = void 0;\n    this._isSelectAll = void 0;\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = (_options$allowsCellSe = options == null ? void 0 : options.allowsCellSelection) != null ? _options$allowsCellSe : false;\n    this._isSelectAll = null;\n  }\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n\n\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n   * Whether the collection allows empty selection.\n   */\n\n\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n   * Whether the collection is currently focused.\n   */\n\n\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n   * Sets whether the collection is focused.\n   */\n\n\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n   * The current focused key in the collection.\n   */\n\n\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /**\n   * Sets the focused key.\n   */\n\n\n  setFocusedKey(key) {\n    this.state.setFocusedKey(key);\n  }\n  /**\n   * The currently selected keys in the collection.\n   */\n\n\n  get selectedKeys() {\n    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n   * Returns whether a key is selected.\n   */\n\n\n  isSelected(key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all' || this.state.selectedKeys.has(key);\n  }\n  /**\n   * Whether the selection is empty.\n   */\n\n\n  get isEmpty() {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n  /**\n   * Whether all items in the collection are selected.\n   */\n\n\n  get isSelectAll() {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey() {\n    var _first;\n\n    let first = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n\n      if (!first || (item == null ? void 0 : item.index) < first.index) {\n        first = item;\n      }\n    }\n\n    return (_first = first) == null ? void 0 : _first.key;\n  }\n\n  get lastSelectedKey() {\n    var _last;\n\n    let last = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n\n      if (!last || (item == null ? void 0 : item.index) > last.index) {\n        last = item;\n      }\n    }\n\n    return (_last = last) == null ? void 0 : _last.key;\n  }\n  /**\n   * Extends the selection to the given key.\n   */\n\n\n  extendSelection(toKey) {\n    toKey = this.getKey(toKey);\n    this.state.setSelectedKeys(selectedKeys => {\n      // Only select the one key if coming from a select all.\n      if (selectedKeys === 'all') {\n        return new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection([toKey], toKey, toKey);\n      }\n\n      let selection = selectedKeys;\n      let anchorKey = selection.anchorKey || toKey;\n      let keys = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(selection, anchorKey, toKey);\n\n      for (let key of this.getKeyRange(anchorKey, selection.currentKey || toKey)) {\n        keys.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          keys.add(key);\n        }\n      }\n\n      return keys;\n    });\n  }\n\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n\n    while (key) {\n      let item = this.collection.getItem(key);\n\n      if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  getKey(key) {\n    let item = this.collection.getItem(key);\n\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    } // If cell selection is allowed, just return the key.\n\n\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    } // Find a parent item to select\n\n\n    while (item.type !== 'item' && item.parentKey) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n  /**\n   * Toggles whether the given key is selected.\n   */\n\n\n  toggleSelection(key) {\n    key = this.getKey(key);\n\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(selectedKeys => {\n      let keys = new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection(selectedKeys === 'all' ? this.getSelectAllKeys() : selectedKeys);\n\n      if (keys.has(key)) {\n        keys.delete(key); // TODO: move anchor to last selected key...\n        // Does `current` need to move here too?\n      } else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n\n      return keys;\n    });\n  }\n  /**\n   * Replaces the selection with only the given key.\n   */\n\n\n  replaceSelection(key) {\n    key = this.getKey(key);\n\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection([key], key, key));\n  }\n\n  getSelectAllKeys() {\n    let keys = [];\n\n    let addKeys = key => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n\n          if (item.type === 'item') {\n            keys.push(key);\n          } // Add child keys. If cell selection is allowed, then include item children too.\n\n\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n   * Selects all items in the collection.\n   */\n\n\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n  /**\n   * Removes all keys from the selection.\n   */\n\n\n  clearSelection() {\n    if (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0) {\n      this.state.setSelectedKeys(new $c91e86e24f2dc9a2182dcc2674c58c$export$Selection());\n    }\n  }\n  /**\n   * Toggles between select all and an empty selection.\n   */\n\n\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key, e) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (e && e.shiftKey) {\n      this.extendSelection(key);\n    } else {\n      this.toggleSelection(key);\n    }\n  }\n\n}","map":{"version":3,"sources":["packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"names":["anchorKey","currentKey","constructor","keys","selectionMode","disallowEmptySelection","isFocusedRef","useRef","useState","focusedKeyRef","selectedKeysProp","useMemo","convertSelection","props","defaultSelectedKeys","useControlledState","disabledKeysProp","setFocused","setFocusedKey","disabledKeys","selection","collection","state","allowsCellSelection","_isSelectAll","options","isSelected","key","allKeys","selectedKeys","k","first","item","last","extendSelection","toKey","getKeyRange","fromItem","toItem","getKeyRangeInternal","getKey","toggleSelection","replaceSelection","getSelectAllKeys","addKeys","selectAll","clearSelection","toggleSelectAll","select","e"],"mappings":";;AAAA;;;;;;;;;;;;AAcA;;;;;AAIO,MAAA,gDAAA,SAAA,GAAA,CAAiC;AAItCE,EAAAA,WAAW,CAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAsE;AAC/E,UAAA,IAAA;AAD+E,SAHjFF,SAGiF,GAAA,KAAA,CAAA;AAAA,SAFjFC,UAEiF,GAAA,KAAA,CAAA;;AAE/E,QAAIE,IAAI,YAAR,gDAAA,EAA+B;AAC7B,WAAA,SAAA,GAAiBH,SAAS,IAAIG,IAAI,CAAlC,SAAA;AACA,WAAA,UAAA,GAAkBF,UAAU,IAAIE,IAAI,CAApC,UAAA;AAFF,KAAA,MAGO;AACL,WAAA,SAAA,GAAA,SAAA;AACA,WAAA,UAAA,GAAA,UAAA;AACD;AACF;;AAbqC;ACAxC;;;;;OAGO,SAAA,yBAAA,CAAA,KAAA,EAAqF;AAC1F,MAAI;AACFC,IAAAA,aAAa,GADX,MAAA;AAEFC,IAAAA;AAFE,MADsF,KAC1F,CAD0F,CAM1F;AACA;;AACA,MAAIC,YAAY,GAAGC,MAAM,CAAzB,KAAyB,CAAzB;AACA,MAAI,GAAA,UAAA,IAAiBC,QAAQ,CAA7B,KAA6B,CAA7B;AACA,MAAIC,aAAa,GAAGF,MAAM,CAA1B,IAA0B,CAA1B;AACA,MAAI,GAAA,aAAA,IAAoBC,QAAQ,CAAhC,IAAgC,CAAhC;AACA,MAAIE,gBAAgB,GAAGC,OAAO,CAAC,MAAMC,kDAAgB,CAACC,KAAK,CAA7B,YAAuB,CAAvB,EAA6C,CAACA,KAAK,CAAjF,YAA2E,CAA7C,CAA9B;AACA,MAAIC,mBAAmB,GAAGH,OAAO,CAAC,MAAMC,kDAAgB,CAACC,KAAK,CAAN,mBAAA,EAA4B,IAAnD,gDAAmD,EAA5B,CAAvB,EAAqE,CAACA,KAAK,CAA5G,mBAAsG,CAArE,CAAjC;AACA,MAAI,CAAA,YAAA,EAAA,eAAA,IAAkCE,kBAAkB,CAAA,gBAAA,EAAA,mBAAA,EAGtDF,KAAK,CAHP,iBAAwD,CAAxD;AAKA,MAAIG,gBAAgB,GAAGL,OAAO,CAAC,MAC7BE,KAAK,CAALA,YAAAA,GAAqB,IAAA,GAAA,CAAQA,KAAK,CAAlCA,YAAqB,CAArBA,GAAmD,IADvB,GACuB,EADvB,EAE5B,CAACA,KAAK,CAFR,YAEE,CAF4B,CAA9B;AAIA,SAAO;AAAA,IAAA,aAAA;AAAA,IAAA,sBAAA;;AAGL,QAAA,SAAA,GAAgB;AACd,aAAOP,YAAY,CAAnB,OAAA;AAJG,KAAA;;AAMLW,IAAAA,UAAU,CAAA,CAAA,EAAI;AACZX,MAAAA,YAAY,CAAZA,OAAAA,GAAAA,CAAAA;AACAW,MAAAA,UAAU,CAAVA,CAAU,CAAVA;AARG,KAAA;;AAUL,QAAA,UAAA,GAAiB;AACf,aAAOR,aAAa,CAApB,OAAA;AAXG,KAAA;;AAaLS,IAAAA,aAAa,CAAA,CAAA,EAAI;AACfT,MAAAA,aAAa,CAAbA,OAAAA,GAAAA,CAAAA;AACAS,MAAAA,aAAa,CAAbA,CAAa,CAAbA;AAfG,KAAA;;AAAA,IAAA,YAAA;AAAA,IAAA,eAAA;AAmBLC,IAAAA,YAAY,EAAEH;AAnBT,GAAP;AAqBD;;AAED,SAAA,kDAAA,CAAA,SAAA,EAAA,YAAA,EAAyG;AACvG,MAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,YAAA;AACD;;AAED,SAAOI,SAAS,KAATA,KAAAA,GAAAA,KAAAA,GAEH,IAAA,gDAAA,CAFJ,SAEI,CAFJ;AAGD;ACtDD;;;;;OAGO,MAAA,gBAAA,CAA2D;AAMhElB,EAAAA,WAAW,CAAA,UAAA,EAAA,KAAA,EAAA,OAAA,EAA0G;AAAA,QAAA,qBAAA;;AAAA,SAL7GmB,UAK6G,GAAA,KAAA,CAAA;AAAA,SAJ7GC,KAI6G,GAAA,KAAA,CAAA;AAAA,SAH7GC,mBAG6G,GAAA,KAAA,CAAA;AAAA,SAF7GC,YAE6G,GAAA,KAAA,CAAA;AACnH,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,mBAAA,GAAA,CAAA,qBAAA,GAA2BC,OAA3B,IAAA,IAA2BA,GAA3B,KAAA,CAA2BA,GAAAA,OAAO,CAAlC,mBAAA,KAAA,IAAA,GAAA,qBAAA,GAAA,KAAA;AACA,SAAA,YAAA,GAAA,IAAA;AACD;AAED;;;;;AAGA,MAAA,aAAA,GAAmC;AACjC,WAAO,KAAA,KAAA,CAAP,aAAA;AACD;AAED;;;;;AAGA,MAAA,sBAAA,GAAsC;AACpC,WAAO,KAAA,KAAA,CAAP,sBAAA;AACD;AAED;;;;;AAGA,MAAA,SAAA,GAAyB;AACvB,WAAO,KAAA,KAAA,CAAP,SAAA;AACD;AAED;;;;;AAGAR,EAAAA,UAAU,CAAA,SAAA,EAAqB;AAC7B,SAAA,KAAA,CAAA,UAAA,CAAA,SAAA;AACD;AAED;;;;;AAGA,MAAA,UAAA,GAAsB;AACpB,WAAO,KAAA,KAAA,CAAP,UAAA;AACD;AAED;;;;;AAGAC,EAAAA,aAAa,CAAA,GAAA,EAAW;AACtB,SAAA,KAAA,CAAA,aAAA,CAAA,GAAA;AACD;AAED;;;;;AAGA,MAAA,YAAA,GAA6B;AAC3B,WAAO,KAAA,KAAA,CAAA,YAAA,KAAA,KAAA,GACH,IAAA,GAAA,CAAQ,KADL,gBACK,EAAR,CADG,GAEH,KAAA,KAAA,CAFJ,YAAA;AAGD;AAED;;;;;AAGAQ,EAAAA,UAAU,CAAA,GAAA,EAAW;AACnB,QAAI,KAAA,KAAA,CAAA,aAAA,KAAJ,MAAA,EAAyC;AACvC,aAAA,KAAA;AACD;;AAEDC,IAAAA,GAAG,GAAG,KAAA,MAAA,CAANA,GAAM,CAANA;AACA,WAAO,KAAA,KAAA,CAAA,YAAA,KAAA,KAAA,IAAqC,KAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAA5C,GAA4C,CAA5C;AACD;AAED;;;;;AAGA,MAAA,OAAA,GAAuB;AACrB,WAAO,KAAA,KAAA,CAAA,YAAA,KAAA,KAAA,IAAqC,KAAA,KAAA,CAAA,YAAA,CAAA,IAAA,KAA5C,CAAA;AACD;AAED;;;;;AAGA,MAAA,WAAA,GAA2B;AACzB,QAAI,KAAJ,OAAA,EAAkB;AAChB,aAAA,KAAA;AACD;;AAED,QAAI,KAAA,KAAA,CAAA,YAAA,KAAJ,KAAA,EAAuC;AACrC,aAAA,IAAA;AACD;;AAED,QAAI,KAAA,YAAA,IAAJ,IAAA,EAA+B;AAC7B,aAAO,KAAP,YAAA;AACD;;AAED,QAAIC,OAAO,GAAG,KAAd,gBAAc,EAAd;AACA,QAAIC,YAAY,GAAG,KAAA,KAAA,CAAnB,YAAA;AACA,SAAA,YAAA,GAAoBD,OAAO,CAAPA,KAAAA,CAAcE,CAAC,IAAID,YAAY,CAAZA,GAAAA,CAAvC,CAAuCA,CAAnBD,CAApB;AACA,WAAO,KAAP,YAAA;AACD;;AAED,MAAA,gBAAA,GAAmC;AAAA,QAAA,MAAA;;AACjC,QAAIG,KAA2B,GAA/B,IAAA;;AACA,SAAK,IAAL,GAAA,IAAgB,KAAA,KAAA,CAAhB,YAAA,EAAyC;AACvC,UAAIC,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAX,GAAW,CAAX;;AACA,UAAI,CAAA,KAAA,IAAU,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,KAAA,IAAcD,KAAK,CAAjC,KAAA,EAAyC;AACvCA,QAAAA,KAAK,GAALA,IAAAA;AACD;AACF;;AAED,WAAA,CAAA,MAAA,GAAA,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAOA,MAAAA,CAAP,GAAA;AACD;;AAED,MAAA,eAAA,GAAkC;AAAA,QAAA,KAAA;;AAChC,QAAIE,IAA0B,GAA9B,IAAA;;AACA,SAAK,IAAL,GAAA,IAAgB,KAAA,KAAA,CAAhB,YAAA,EAAyC;AACvC,UAAID,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAX,GAAW,CAAX;;AACA,UAAI,CAAA,IAAA,IAAS,CAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAJ,KAAA,IAAcC,IAAI,CAA/B,KAAA,EAAuC;AACrCA,QAAAA,IAAI,GAAJA,IAAAA;AACD;AACF;;AAED,WAAA,CAAA,KAAA,GAAA,IAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAOA,KAAAA,CAAP,GAAA;AACD;AAED;;;;;AAGAC,EAAAA,eAAe,CAAA,KAAA,EAAa;AAC1BC,IAAAA,KAAK,GAAG,KAAA,MAAA,CAARA,KAAQ,CAARA;AACA,SAAA,KAAA,CAAA,eAAA,CAA2BN,YAAY,IAAI;AACzC;AACA,UAAIA,YAAY,KAAhB,KAAA,EAA4B;AAC1B,eAAO,IAAA,gDAAA,CAAc,CAAd,KAAc,CAAd,EAAA,KAAA,EAAP,KAAO,CAAP;AACD;;AAED,UAAIT,SAAS,GAAb,YAAA;AACA,UAAIpB,SAAS,GAAGoB,SAAS,CAATA,SAAAA,IAAhB,KAAA;AACA,UAAIjB,IAAI,GAAG,IAAA,gDAAA,CAAA,SAAA,EAAA,SAAA,EAAX,KAAW,CAAX;;AACA,WAAK,IAAL,GAAA,IAAgB,KAAA,WAAA,CAAA,SAAA,EAA4BiB,SAAS,CAATA,UAAAA,IAA5C,KAAgB,CAAhB,EAA4E;AAC1EjB,QAAAA,IAAI,CAAJA,MAAAA,CAAAA,GAAAA;AACD;;AAED,WAAK,IAAL,GAAA,IAAgB,KAAA,WAAA,CAAA,KAAA,EAAhB,SAAgB,CAAhB,EAAoD;AAClD,YAAI,CAAC,KAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAL,GAAK,CAAL,EAAuC;AACrCA,UAAAA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA;AACD;AACF;;AAED,aAAA,IAAA;AAnBF,KAAA;AAqBD;;AAEOiC,EAAAA,WAAR,CAAA,IAAA,EAAA,EAAA,EAAwC;AACtC,QAAIC,QAAQ,GAAG,KAAA,UAAA,CAAA,OAAA,CAAf,IAAe,CAAf;AACA,QAAIC,MAAM,GAAG,KAAA,UAAA,CAAA,OAAA,CAAb,EAAa,CAAb;;AACA,QAAID,QAAQ,IAAZ,MAAA,EAAwB;AACtB,UAAIA,QAAQ,CAARA,KAAAA,IAAkBC,MAAM,CAA5B,KAAA,EAAoC;AAClC,eAAO,KAAA,mBAAA,CAAA,IAAA,EAAP,EAAO,CAAP;AACD;;AAED,aAAO,KAAA,mBAAA,CAAA,EAAA,EAAP,IAAO,CAAP;AACD;;AAED,WAAA,EAAA;AACD;;AAEOC,EAAAA,mBAAR,CAAA,IAAA,EAAA,EAAA,EAAgD;AAC9C,QAAIpC,IAAW,GAAf,EAAA;AACA,QAAIwB,GAAG,GAAP,IAAA;;AACA,WAAA,GAAA,EAAY;AACV,UAAIK,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAX,GAAW,CAAX;;AACA,UAAIA,IAAI,IAAIA,IAAI,CAAJA,IAAAA,KAARA,MAAAA,IAAiCA,IAAI,CAAJA,IAAAA,KAAAA,MAAAA,IAAwB,KAA7D,mBAAA,EAAwF;AACtF7B,QAAAA,IAAI,CAAJA,IAAAA,CAAAA,GAAAA;AACD;;AAED,UAAIwB,GAAG,KAAP,EAAA,EAAgB;AACd,eAAA,IAAA;AACD;;AAEDA,MAAAA,GAAG,GAAG,KAAA,UAAA,CAAA,WAAA,CAANA,GAAM,CAANA;AACD;;AAED,WAAA,EAAA;AACD;;AAEOa,EAAAA,MAAR,CAAA,GAAA,EAAyB;AACvB,QAAIR,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAX,GAAW,CAAX;;AACA,QAAI,CAAJ,IAAA,EAAW;AACT;AACA,aAAA,GAAA;AAJqB,KAAA,CAOvB;;;AACA,QAAIA,IAAI,CAAJA,IAAAA,KAAAA,MAAAA,IAAwB,KAA5B,mBAAA,EAAsD;AACpD,aAAA,GAAA;AATqB,KAAA,CAYvB;;;AACA,WAAOA,IAAI,CAAJA,IAAAA,KAAAA,MAAAA,IAAwBA,IAAI,CAAnC,SAAA,EAA+C;AAC7CA,MAAAA,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAwBA,IAAI,CAAnCA,SAAO,CAAPA;AACD;;AAED,QAAI,CAAA,IAAA,IAASA,IAAI,CAAJA,IAAAA,KAAb,MAAA,EAAmC;AACjC,aAAA,IAAA;AACD;;AAED,WAAOA,IAAI,CAAX,GAAA;AACD;AAED;;;;;AAGAS,EAAAA,eAAe,CAAA,GAAA,EAAW;AACxBd,IAAAA,GAAG,GAAG,KAAA,MAAA,CAANA,GAAM,CAANA;;AACA,QAAIA,GAAG,IAAP,IAAA,EAAiB;AACf;AACD;;AAED,SAAA,KAAA,CAAA,eAAA,CAA2BE,YAAY,IAAI;AACzC,UAAI1B,IAAI,GAAG,IAAA,gDAAA,CAAc0B,YAAY,KAAZA,KAAAA,GAAyB,KAAzBA,gBAAyB,EAAzBA,GAAzB,YAAW,CAAX;;AACA,UAAI1B,IAAI,CAAJA,GAAAA,CAAJ,GAAIA,CAAJ,EAAmB;AACjBA,QAAAA,IAAI,CAAJA,MAAAA,CADiB,GACjBA,EADiB,CAEjB;AACA;AAHF,OAAA,MAIO;AACLA,QAAAA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA;AACAA,QAAAA,IAAI,CAAJA,SAAAA,GAAAA,GAAAA;AACAA,QAAAA,IAAI,CAAJA,UAAAA,GAAAA,GAAAA;AACD;;AAED,aAAA,IAAA;AAZF,KAAA;AAcD;AAED;;;;;AAGAuC,EAAAA,gBAAgB,CAAA,GAAA,EAAW;AACzBf,IAAAA,GAAG,GAAG,KAAA,MAAA,CAANA,GAAM,CAANA;;AACA,QAAIA,GAAG,IAAP,IAAA,EAAiB;AACf;AACD;;AAED,SAAA,KAAA,CAAA,eAAA,CAA2B,IAAA,gDAAA,CAAc,CAAd,GAAc,CAAd,EAAA,GAAA,EAA3B,GAA2B,CAA3B;AACD;;AAEOgB,EAAAA,gBAAR,GAA2B;AACzB,QAAIxC,IAAW,GAAf,EAAA;;AACA,QAAIyC,OAAO,GAAIjB,GAAD,IAAc;AAC1B,aAAA,GAAA,EAAY;AACV,YAAI,CAAC,KAAA,KAAA,CAAA,YAAA,CAAA,GAAA,CAAL,GAAK,CAAL,EAAuC;AACrC,cAAIK,IAAI,GAAG,KAAA,UAAA,CAAA,OAAA,CAAX,GAAW,CAAX;;AACA,cAAIA,IAAI,CAAJA,IAAAA,KAAJ,MAAA,EAA0B;AACxB7B,YAAAA,IAAI,CAAJA,IAAAA,CAAAA,GAAAA;AAHmC,WAAA,CAMrC;;;AACA,cAAI6B,IAAI,CAAJA,aAAAA,KAAuB,KAAA,mBAAA,IAA4BA,IAAI,CAAJA,IAAAA,KAAvD,MAAIA,CAAJ,EAA8E;AAC5EY,YAAAA,OAAO,CAAC,CAAC,GAAGZ,IAAI,CAAR,UAAA,EAAA,CAAA,EAARY,GAAO,CAAPA;AACD;AACF;;AAEDjB,QAAAA,GAAG,GAAG,KAAA,UAAA,CAAA,WAAA,CAANA,GAAM,CAANA;AACD;AAfH,KAAA;;AAkBAiB,IAAAA,OAAO,CAAC,KAAA,UAAA,CAARA,WAAQ,EAAD,CAAPA;AACA,WAAA,IAAA;AACD;AAED;;;;;AAGAC,EAAAA,SAAS,GAAG;AACV,QAAI,KAAA,aAAA,KAAJ,UAAA,EAAuC;AACrC,WAAA,KAAA,CAAA,eAAA,CAAA,KAAA;AACD;AACF;AAED;;;;;AAGAC,EAAAA,cAAc,GAAG;AACf,QAAI,KAAA,KAAA,CAAA,YAAA,KAAA,KAAA,IAAqC,KAAA,KAAA,CAAA,YAAA,CAAA,IAAA,GAAzC,CAAA,EAA2E;AACzE,WAAA,KAAA,CAAA,eAAA,CAA2B,IAA3B,gDAA2B,EAA3B;AACD;AACF;AAED;;;;;AAGAC,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAJ,WAAA,EAAsB;AACpB,WAAA,cAAA;AADF,KAAA,MAEO;AACL,WAAA,SAAA;AACD;AACF;;AAEDC,EAAAA,MAAM,CAAA,GAAA,EAAA,CAAA,EAA0C;AAC9C,QAAI,KAAA,aAAA,KAAJ,MAAA,EAAmC;AACjC;AACD;;AAED,QAAI,KAAA,aAAA,KAAJ,QAAA,EAAqC;AACnC,UAAI,KAAA,UAAA,CAAA,GAAA,KAAwB,CAAC,KAA7B,sBAAA,EAA0D;AACxD,aAAA,eAAA,CAAA,GAAA;AADF,OAAA,MAEO;AACL,aAAA,gBAAA,CAAA,GAAA;AACD;AALH,KAAA,MAMO,IAAIC,CAAC,IAAIA,CAAC,CAAV,QAAA,EAAqB;AAC1B,WAAA,eAAA,CAAA,GAAA;AADK,KAAA,MAEA;AACL,WAAA,eAAA,CAAA,GAAA;AACD;AACF;;AAhU+D","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelection): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    setFocusedKey(k) {\n      focusedKeyRef.current = k;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys,\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node, PressEvent, SelectionMode} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key) {\n    this.state.setFocusedKey(key);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all' || this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    toKey = this.getKey(toKey);\n    this.state.setSelectedKeys(selectedKeys => {\n      // Only select the one key if coming from a select all.\n      if (selectedKeys === 'all') {\n        return new Selection([toKey], toKey, toKey);\n      }\n\n      let selection = selectedKeys as Selection;\n      let anchorKey = selection.anchorKey || toKey;\n      let keys = new Selection(selection, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selection.currentKey || toKey)) {\n        keys.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          keys.add(key);\n        }\n      }\n\n      return keys;\n    });\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(selectedKeys => {\n      let keys = new Selection(selectedKeys === 'all' ? this.getSelectAllKeys() : selectedKeys);\n      if (keys.has(key)) {\n        keys.delete(key);\n        // TODO: move anchor to last selected key...\n        // Does `current` need to move here too?\n      } else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n\n      return keys;\n    });\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (e && e.shiftKey) {\n      this.extendSelection(key);\n    } else {\n      this.toggleSelection(key);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}