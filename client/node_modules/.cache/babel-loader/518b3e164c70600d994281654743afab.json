{"ast":null,"code":"import { useEffect } from \"react\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { filterDOMProps, useSlotId } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\n\nexport function useDialog(props, ref) {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.\n\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusSafely(ref.current);\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n\n  return {\n    dialogProps: _babelRuntimeHelpersEsmExtends({}, filterDOMProps(props, {\n      labelable: true\n    }), {\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    }),\n    titleProps: {\n      id: titleId\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/dialog/src/useDialog.ts"],"names":["role","titleId","useSlotId","props","useEffect","ref","document","focusSafely","timeout","setTimeout","clearTimeout","dialogProps","filterDOMProps","labelable","tabIndex","titleProps","id"],"mappings":";;;;AAyBA;;;;;OAIO,SAAA,SAAA,CAAA,KAAA,EAAA,GAAA,EAAoF;AACzF,MAAI;AAACA,IAAAA,IAAI,GAAG;AAAR,MAAJ,KAAA;AACA,MAAIC,OAAO,GAAGC,SAAd,EAAA;AACAD,EAAAA,OAAO,GAAGE,KAAK,CAALA,YAAK,CAALA,GAAAA,SAAAA,GAH+E,OAGzFF,CAHyF,CAKzF;;AACAG,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIC,GAAG,CAAHA,OAAAA,IAAe,CAACA,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,CAAqBC,QAAQ,CAAjD,aAAoBD,CAApB,EAAkE;AAChEE,MAAAA,WAAW,CAACF,GAAG,CADiD,OACrD,CAAXE,CADgE,CAGhE;AACA;AACA;;AACA,UAAIC,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7B,YAAIH,QAAQ,CAARA,aAAAA,KAA2BD,GAAG,CAAlC,OAAA,EAA4C;AAC1CA,UAAAA,GAAG,CAAHA,OAAAA,CAAAA,IAAAA;AACAE,UAAAA,WAAW,CAACF,GAAG,CAAfE,OAAW,CAAXA;AACD;AAJqB,OAAA,EAAxB,GAAwB,CAAxB;AAOA,aAAO,MAAM;AACXG,QAAAA,YAAY,CAAZA,OAAY,CAAZA;AADF,OAAA;AAGD;AAjBM,GAAA,EAkBN,CAxBsF,GAwBtF,CAlBM,CAATN,CANyF,CA0BzF;AACA;AACA;AACA;AACA;;AACA,SAAO;AACLO,IAAAA,WAAW,EAAA,8BAAA,CAAA,EAAA,EACNC,cAAc,CAAA,KAAA,EAAQ;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAR,CADR,EAAA;AAAA,MAAA,IAAA;AAGTC,MAAAA,QAAQ,EAAE,CAHD,CAAA;AAIT,yBAAmBX,KAAK,CAALA,iBAAK,CAALA,IAA4BF;AAJtC,KAAA,CADN;AAOLc,IAAAA,UAAU,EAAE;AACVC,MAAAA,EAAE,EAAEf;AADM;AAPP,GAAP;AAWD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\n\ninterface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the dialog title element. */\n  titleProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<HTMLElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusSafely(ref.current);\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}