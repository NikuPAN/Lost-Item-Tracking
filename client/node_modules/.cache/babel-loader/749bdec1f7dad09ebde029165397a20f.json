{"ast":null,"code":"import { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport { getItemCount } from \"@react-stately/collections\";\nimport { useSelectableList, useSelectableItem } from \"@react-aria/selection\";\nimport { useLabel } from \"@react-aria/label\";\nimport { filterDOMProps, mergeProps, useId, useSlotId } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport const listIds = new WeakMap();\n\nfunction $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(key) {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId(state, itemKey) {\n  let listId = listIds.get(state);\n\n  if (!listId) {\n    throw new Error('Unknown list');\n  }\n\n  return listId + \"-option-\" + $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(itemKey);\n}\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\n\nexport function useListBox(props, state, ref) {\n  let domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    listProps\n  } = useSelectableList(_babelRuntimeHelpersEsmExtends({}, props, {\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  }));\n  let id = useId(props.id);\n  listIds.set(state, id);\n  let {\n    labelProps,\n    fieldProps\n  } = useLabel(_babelRuntimeHelpersEsmExtends({}, props, {\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  }));\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _babelRuntimeHelpersEsmExtends({\n      role: 'listbox'\n    }, mergeProps(fieldProps, listProps)))\n  };\n}\nconst $d79719e4e3369b10c98de169e0d7fe$var$isSafariMacOS = typeof window !== 'undefined' && window.navigator != null ? /^Mac/.test(window.navigator.platform) && /Safari/.test(window.navigator.userAgent) && !/Chrome/.test(window.navigator.userAgent) : false;\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\n\nexport function useOption(props, state, ref) {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus\n  } = props;\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n\n  if (!$d79719e4e3369b10c98de169e0d7fe$var$isSafariMacOS) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {\n    itemProps\n  } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n  let {\n    pressProps\n  } = usePress(_babelRuntimeHelpersEsmExtends({}, itemProps, {\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus\n  }));\n  let {\n    hoverProps\n  } = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n\n  });\n  return {\n    optionProps: _babelRuntimeHelpersEsmExtends({}, optionProps, mergeProps(pressProps, hoverProps), {\n      id: getItemId(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    }\n  };\n}\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\n\nexport function useListBoxSection(props) {\n  let {\n    heading,\n    'aria-label': ariaLabel\n  } = props;\n  let headingId = useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":["listIds","key","listId","normalizeKey","domProps","filterDOMProps","labelable","listProps","useSelectableList","selectionManager","state","collection","disabledKeys","id","useId","props","fieldProps","useLabel","labelElementType","listBoxProps","mergeProps","role","isSafariMacOS","window","shouldUseVirtualFocus","labelId","useSlotId","descriptionId","optionProps","isSelected","getItemCount","itemProps","useSelectableItem","pressProps","usePress","preventFocusOnPress","hoverProps","useHover","isDisabled","onHoverStart","isFocusVisible","labelProps","descriptionProps","ariaLabel","headingId","headingProps","heading","groupProps","undefined"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\nexport const listIds = new WeakMap<ListState<unknown>, string>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let listId = listIds.get(state);\n\n  if (!listId) {\n    throw new Error('Unknown list');\n  }\n\n  return `${listId}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listIds} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {ListState} from '@react-stately/list';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the option is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key?: Key,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether the option should be focused when the user hovers over it. */\n  shouldFocusOnHover?: boolean,\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  isVirtualized?: boolean,\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  shouldUseVirtualFocus?: boolean\n}\n\nconst isSafariMacOS =\n  typeof window !== 'undefined' && window.navigator != null\n    ? /^Mac/.test(window.navigator.platform) &&\n      /Safari/.test(window.navigator.userAgent) &&\n      !/Chrome/.test(window.navigator.userAgent)\n    : false;\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!isSafariMacOS) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}