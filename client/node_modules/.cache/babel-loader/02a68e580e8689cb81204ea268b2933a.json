{"ast":null,"code":"import { usePress } from \"@react-aria/interactions\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { filterDOMProps, mergeProps, chain } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\n\nexport function useButton(props, ref) {\n  /* eslint-enable no-redeclare */\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n\n  if (elementType !== 'button') {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {\n    pressProps,\n    isPressed\n  } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    ref\n  });\n  let {\n    focusableProps\n  } = useFocusable(props, ref);\n  let buttonProps = mergeProps(focusableProps, pressProps);\n  buttonProps = mergeProps(buttonProps, filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed,\n    // Used to indicate press state for visual\n    buttonProps: mergeProps(buttonProps, _babelRuntimeHelpersEsmExtends({\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      disabled: isDisabled,\n      type\n    }, additionalProps || {}, {\n      onClick: e => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    }))\n  };\n}\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\n\nexport function useToggleButton(props, state, ref) {\n  /* eslint-enable no-redeclare */\n  const {\n    isSelected\n  } = state;\n  const {\n    isPressed,\n    buttonProps\n  } = useButton(_babelRuntimeHelpersEsmExtends({}, props, {\n    onPress: chain(state.toggle, props.onPress)\n  }), ref);\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/button/src/useButton.ts","packages/@react-aria/button/src/useToggleButton.ts"],"names":["elementType","onClick","type","additionalProps","role","tabIndex","isDisabled","href","target","disabled","rel","undefined","isPressed","usePress","ref","focusableProps","useFocusable","buttonProps","mergeProps","filterDOMProps","labelable","props","e","deprecatedOnClick","console","isSelected","onPress","chain","state"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n/* eslint-disable no-redeclare */\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n/* eslint-enable no-redeclare */\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType !== 'button') {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let buttonProps = mergeProps(focusableProps, pressProps);\n  buttonProps = mergeProps(buttonProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      disabled: isDisabled,\n      type,\n      ...(additionalProps || {}),\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\n/* eslint-disable no-redeclare */\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n/* eslint-enable no-redeclare */\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}